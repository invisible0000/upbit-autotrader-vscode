variable_id: VOLUME_SMA
help_documents:
  concept:
    title: 거래량 이동평균의 이해
    content: |
      거래량 이동평균(Volume Simple Moving Average)은 특정 기간 동안의 거래량을 산술평균한 값으로, 시장의 평균적인 활동 수준을 나타내는 중요한 기준선 역할을 합니다.
      현재 거래량과 비교하여 시장 참여도의 상대적 변화를 측정하고, 거래량 기반 신호의 신뢰성을 향상시키는 핵심 도구입니다.

      ## 기본 계산 공식과 의미
      거래량 SMA = (최근 N일간의 거래량 합계) ÷ N

      예를 들어, 20일 거래량 SMA는 최근 20일간의 일일 거래량을 모두 더한 후 20으로 나눈 값입니다.
      이는 지난 20일간의 평균적인 시장 활동 수준을 나타내며, 현재 거래량이 이 평균보다 높은지 낮은지를 판단하는 기준이 됩니다.

      거래량 SMA는 volume 카테고리의 volume_comparable 그룹에 속하며, 다른 거래량 관련 지표들과 직접 비교가 가능합니다.
      차트상에서는 subplot 형태로 표시되어 일반적으로 거래량 막대 그래프와 함께 선 그래프로 표현됩니다.

      ## 거래량 정규화의 역할
      거래량 SMA의 가장 중요한 기능은 거래량의 정규화입니다.
      암호화폐 시장에서 절대적 거래량 수치는 시간이 지나면서 변화하는 시장 구조나 참여자 증가로 인해 그 의미가 달라질 수 있습니다.

      거래량 SMA를 기준으로 상대적 거래량(현재 거래량 / 거래량 SMA)을 계산하면 시장 상황에 관계없이 일관된 기준을 적용할 수 있습니다.
      상대적 거래량이 1.5라면 평상시보다 50% 많은 거래량을, 0.7이라면 평상시보다 30% 적은 거래량을 의미합니다.

      ## 시장 활동 수준의 베이스라인
      거래량 SMA는 해당 시장의 "정상적인" 활동 수준을 나타내는 베이스라인 역할을 합니다.
      이 베이스라인을 기준으로 현재 시장이 과도하게 활발한지(과열), 평소보다 조용한지(무관심), 아니면 정상 범위 내에 있는지를 판단할 수 있습니다.

      특히 중요한 기술적 분석 신호(브레이크아웃, 지지/저항선 테스트 등)가 나타날 때,
      거래량이 SMA보다 높은 수준에서 발생하는지 확인함으로써 신호의 신뢰성을 검증할 수 있습니다.

      ## 추세적 특성과 해석
      거래량 SMA 자체도 추세적 특성을 가집니다.
      상승하는 거래량 SMA는 시장 참여도가 전반적으로 증가하고 있음을 의미하며, 이는 관심 증대나 변동성 확대의 신호일 수 있습니다.
      반대로 하락하는 거래량 SMA는 시장 참여도 감소와 무관심을 나타낼 수 있습니다.

      ## 기간별 거래량 SMA의 특성
      단기 거래량 SMA(5-10일)는 최근 거래량 변화에 민감하게 반응하여 빠른 신호를 제공하지만, 일시적 스파이크에 의해 왜곡될 수 있습니다.

      중기 거래량 SMA(20-50일)는 가장 널리 사용되는 설정으로, 안정성과 반응성의 균형을 제공합니다.
      특히 20일 거래량 SMA는 약 한 달간의 거래 활동을 반영하여 실용적인 분석에 적합합니다.

      장기 거래량 SMA(100일 이상)는 시장의 구조적 변화나 장기적인 참여도 변화를 파악하는 데 유용하지만, 단기적인 기회 포착에는 부적합할 수 있습니다.

      ## 변동성과의 상관관계
      일반적으로 높은 거래량은 높은 변동성과 상관관계를 가지므로, 거래량 SMA의 변화는 향후 변동성 변화를 예측하는 선행 지표로 활용될 수 있습니다.
      거래량 SMA가 상승 추세를 보이면 향후 가격 변동성이 증가할 가능성이 높아집니다.

      ## 시장 성숙도의 지표
      거래량 SMA는 특정 암호화폐나 시장의 성숙도를 측정하는 지표로도 활용됩니다.
      안정적이고 점진적으로 증가하는 거래량 SMA는 건전한 시장 성장을 의미하며,
      급격한 변동이나 지속적인 감소는 시장의 불안정성이나 관심 저하를 나타낼 수 있습니다.

  usage:
    title: VOLUME_SMA 활용 전략
    content: |
      거래량 SMA는 트리거 빌더에서 거래량 기반 신호의 필터링과 시장 활동 수준 측정의 기준점 역할을 수행합니다.
      현재 거래량과의 상대적 비교를 통해 신호의 강도를 측정하고 시장 상황을 정확히 파악할 수 있습니다.

      ## 트리거 빌더 기본 문법
      ```
      조건: VOLUME > VOLUME_SMA_20 * 2
      액션: 평균 대비 2배 거래량 급증, 중요 이벤트 가능성

      조건: VOLUME < VOLUME_SMA_20 * 0.5
      액션: 평균 대비 거래량 급감, 시장 무관심 상태

      조건: BREAKOUT_SIGNAL AND VOLUME > VOLUME_SMA_20 * 1.5
      액션: 충분한 거래량 동반 브레이크아웃, 신뢰성 높은 신호
      ```

      거래량 SMA와의 비율을 통해 현재 거래량의 상대적 크기를 정량화하는 것이 핵심입니다.
      절대값보다는 평균 대비 몇 배인지를 기준으로 거래량 이상 현상을 탐지합니다.

      ## 거래량 정규화 지표 생성
      ```
      # 상대적 거래량 지표 (RVI: Relative Volume Indicator)
      relative_volume = VOLUME / VOLUME_SMA_20

      IF relative_volume > 3.0:
          극고거래량: 주요 뉴스나 이벤트 발생 가능성
          액션: 즉시 시장 상황 점검 및 신중한 대응

      IF relative_volume > 1.5:
          고거래량: 시장 관심 증대
          액션: 다른 기술적 신호와 결합하여 진입 고려

      IF relative_volume < 0.7:
          저거래량: 시장 무관심 또는 관망
          액션: 신규 진입 보다는 기존 포지션 유지
      ```

      상대적 거래량 지표를 통해 시장 참여도를 객관적으로 측정하고, 이에 따른 차별화된 전략을 적용합니다.
      이는 시장 상황에 관계없이 일관된 기준을 제공하는 강력한 도구입니다.

      ## 거래량 SMA 기울기 분석
      ```
      # 거래량 SMA 추세 분석
      volume_sma_slope = (VOLUME_SMA_20 - VOLUME_SMA_20[5]) / 5  # 5일간 변화율

      IF volume_sma_slope > 0.1:  # 상승 기울기
          거래량 기저 상승: 시장 관심 증가 추세
          액션: 향후 변동성 증가 대비, 적극적 전략 준비

      IF volume_sma_slope < -0.1:  # 하락 기울기
          거래량 기저 하락: 시장 관심 감소 추세
          액션: 보수적 접근, 큰 포지션 지양
      ```

      거래량 SMA 자체의 추세를 분석하여 시장 전반의 참여도 변화 방향을 파악합니다.
      이는 중장기적인 시장 환경 변화를 예측하는 데 도움이 됩니다.

      ## 다중 기간 거래량 SMA 조합
      ```
      # 거래량 SMA 골든/데드 크로스
      IF VOLUME_SMA_5 > VOLUME_SMA_20 AND VOLUME_SMA_5[1] <= VOLUME_SMA_20[1]:
          거래량 골든 크로스: 단기 거래량 급증
          액션: 시장 활성화 신호, 변동성 증가 대비

      IF VOLUME_SMA_5 < VOLUME_SMA_20 AND VOLUME_SMA_5[1] >= VOLUME_SMA_20[1]:
          거래량 데드 크로스: 거래량 둔화
          액션: 시장 침체 신호, 보수적 접근

      # 다중 시간대 확인
      IF VOLUME > VOLUME_SMA_5 AND VOLUME > VOLUME_SMA_20 AND VOLUME > VOLUME_SMA_50:
          모든 기간 SMA 상회: 강력한 거래량 급증
          액션: 매우 중요한 시장 변화 가능성
      ```

      서로 다른 기간의 거래량 SMA를 조합하여 거래량 변화의 강도와 지속성을 측정합니다.
      여러 기간에서 동시에 나타나는 신호는 더 높은 신뢰도를 가집니다.

      ## 가격-거래량 SMA 결합 분석
      ```
      # 가격 SMA와 거래량 SMA 동시 분석
      price_above_sma = CURRENT_PRICE > PRICE_SMA_20
      volume_above_sma = VOLUME > VOLUME_SMA_20

      IF price_above_sma AND volume_above_sma:
          가격+거래량 동반 상승: 건전한 상승 추세
          액션: 추세 추종 전략 적용

      IF price_above_sma AND NOT volume_above_sma:
          거래량 부족한 가격 상승: 추세 약화 경고
          액션: 익절 고려, 신규 매수 자제

      IF NOT price_above_sma AND volume_above_sma:
          거래량 급증하는 가격 하락: 공포 매도 가능성
          액션: 과매도 반등 기회 탐색
      ```

      가격과 거래량의 SMA를 동시에 분석하여 시장 상황을 4가지 케이스로 분류하고 각각에 맞는 전략을 적용합니다.

      ## 시간대별 거래량 SMA 최적화
      ```
      # 시간대별 거래량 패턴 고려
      IF ASIAN_HOURS:
          기준 거래량 = VOLUME_SMA_20_ASIAN
      ELIF EUROPEAN_HOURS:
          기준 거래량 = VOLUME_SMA_20_EUROPEAN
      ELIF US_HOURS:
          기준 거래량 = VOLUME_SMA_20_US

      # 시간대별 상대 거래량 계산
      time_adjusted_relative_volume = VOLUME / 기준_거래량

      IF time_adjusted_relative_volume > 2.0:
          해당 시간대 기준 초고거래량
          액션: 지역 특화 이슈 가능성 점검
      ```

      24시간 거래되는 암호화폐의 특성을 고려하여 시간대별로 차별화된 거래량 SMA 기준을 적용합니다.

  advanced:
    title: 거래량 SMA 고급 활용 전략
    content: |
      거래량 SMA의 고급 활용은 전통적인 평균 기반 분석을 넘어서 적응형 평균, 통계적 모델링, 그리고 기계학습 기반 예측을 통합한 정교한 거래량 분석 시스템을 포함합니다.
      현대 퀀트 거래의 핵심 기법들을 거래량 분석에 적용하여 시장 미시구조를 정밀하게 파악할 수 있습니다.

      ## 적응형 거래량 SMA (Adaptive Volume SMA)
      ```python
      # 변동성 기반 적응형 기간 조정
      def adaptive_volume_sma(volume_data, base_period=20, volatility_factor=0.5):
          """시장 변동성에 따라 동적으로 조정되는 거래량 SMA"""

          # 거래량 변동성 계산
          volume_volatility = calculate_rolling_std(volume_data, window=base_period)
          normalized_volatility = volume_volatility / volume_data.rolling(base_period).mean()

          # 적응형 기간 계산
          adaptive_periods = []
          for vol in normalized_volatility:
              if vol > 1.5:  # 고변동성
                  period = int(base_period * (1 + volatility_factor))
              elif vol < 0.5:  # 저변동성
                  period = int(base_period * (1 - volatility_factor))
              else:
                  period = base_period
              adaptive_periods.append(max(5, min(50, period)))  # 5~50 범위 제한

          # 적응형 SMA 계산
          adaptive_sma = []
          for i, period in enumerate(adaptive_periods):
              if i >= period:
                  sma_value = volume_data[i-period+1:i+1].mean()
                  adaptive_sma.append(sma_value)
              else:
                  adaptive_sma.append(volume_data[:i+1].mean())

          return adaptive_sma

      # 적응형 거래량 SMA 적용
      adaptive_vol_sma = adaptive_volume_sma(volume_history)
      current_adaptive_ratio = current_volume / adaptive_vol_sma[-1]

      IF current_adaptive_ratio > 2.0:
          변동성 조정 고거래량: 시장 상황 대비 비정상적 활동
      ```

      시장 변동성에 따라 거래량 SMA의 기간을 동적으로 조정하여 시장 상황에 적응적인 기준선을 생성합니다.
      고변동성 구간에서는 더 긴 기간으로 안정화하고, 저변동성에서는 더 짧은 기간으로 민감도를 높입니다.

      ## 가중 거래량 SMA (Weighted Volume SMA)
      ```python
      # 시간 가중 거래량 SMA
      def time_weighted_volume_sma(volume_data, price_data, period=20):
          """가격 변동성에 따라 가중치를 부여한 거래량 SMA"""

          # 가격 변동률 기반 가중치 계산
          price_changes = np.abs(np.diff(price_data) / price_data[:-1])

          weighted_sma = []
          for i in range(period-1, len(volume_data)):
              window_volumes = volume_data[i-period+1:i+1]
              window_weights = price_changes[i-period+1:i+1]

              # 가중 평균 계산
              weighted_avg = np.average(window_volumes, weights=window_weights)
              weighted_sma.append(weighted_avg)

          return weighted_sma

      # 가중 거래량 SMA와 비교
      weighted_vol_sma = time_weighted_volume_sma(volume_history, price_history)

      IF current_volume > weighted_vol_sma[-1] * 1.8:
          가격 변동성 고려 고거래량: 진짜 시장 관심 증대
      ```

      단순한 산술평균이 아닌 가격 변동성에 따른 가중평균을 사용하여 더 의미 있는 거래량 기준선을 생성합니다.

      ## 거래량 SMA 기반 이상 탐지
      ```python
      # Z-Score 기반 거래량 이상 탐지
      def volume_anomaly_detection(volume_data, sma_period=20, threshold=2.5):
          """통계적 방법으로 거래량 이상값 탐지"""

          volume_sma = volume_data.rolling(sma_period).mean()
          volume_std = volume_data.rolling(sma_period).std()

          # Z-Score 계산
          z_scores = (volume_data - volume_sma) / volume_std

          # 이상값 탐지
          anomalies = []
          for i, z_score in enumerate(z_scores):
              if abs(z_score) > threshold:
                  anomaly_type = 'spike' if z_score > 0 else 'drop'
                  confidence = min(abs(z_score) / threshold, 3.0)  # 최대 3배
                  anomalies.append({
                      'index': i,
                      'type': anomaly_type,
                      'confidence': confidence,
                      'z_score': z_score
                  })

          return anomalies

      # 실시간 이상값 모니터링
      current_z_score = (current_volume - volume_sma_20) / volume_std_20

      IF abs(current_z_score) > 3.0:  # 99.7% 신뢰구간 초과
          통계적 극한 이상값: 시장 조작 또는 중대 이벤트 가능성
          액션: 즉각적인 상황 분석 및 대응 필요
      ```

      통계적 방법을 사용하여 정상적인 거래량 범위를 벗어나는 이상값을 객관적으로 탐지합니다.

      ## 기계학습 기반 거래량 SMA 예측
      ```python
      # LSTM을 활용한 거래량 SMA 예측
      def predict_volume_sma_trend(volume_history, sma_history, market_features):
          """미래 거래량 SMA 변화 방향 예측"""

          # 특성 엔지니어링
          features = {
              'volume_momentum': calculate_volume_momentum(volume_history, [5, 10, 20]),
              'sma_slope': calculate_sma_slope(sma_history, 5),
              'volume_volatility': calculate_rolling_volatility(volume_history, 10),
              'price_volume_correlation': calculate_correlation(price_history, volume_history, 20),
              'market_sentiment': market_features['sentiment'],
              'time_features': extract_time_features()  # 요일, 시간대 등
          }

          # LSTM 모델로 예측
          model = load_trained_lstm_model('volume_sma_predictor.h5')
          prediction = model.predict(features)

          return {
              'predicted_direction': 'up' if prediction > 0.5 else 'down',
              'confidence': abs(prediction - 0.5) * 2,
              'predicted_change': prediction
          }

      # 예측 기반 전략 조정
      volume_sma_forecast = predict_volume_sma_trend(volume_hist, sma_hist, market_data)

      IF volume_sma_forecast['predicted_direction'] == 'up' AND volume_sma_forecast['confidence'] > 0.7:
          거래량 기저 상승 예측: 향후 변동성 증가 대비
          액션: 포지션 크기 조정, 변동성 전략 준비
      ```

      기계학습 모델을 사용하여 거래량 SMA의 미래 변화를 예측하고, 이를 바탕으로 선제적 전략 조정을 실행합니다.

      ## 거래량 SMA 기반 시장 체제 분류
      ```python
      # Hidden Markov Model을 활용한 거래량 체제 분석
      def classify_volume_regime(volume_data, sma_data, price_data):
          """거래량 패턴을 기반으로 시장 체제 분류"""

          # 거래량 특성 추출
          relative_volume = volume_data / sma_data
          volume_volatility = calculate_rolling_volatility(relative_volume, 10)
          volume_trend = calculate_trend_strength(sma_data, 20)

          # 시장 체제 특성
          regime_features = np.column_stack([
              relative_volume,
              volume_volatility,
              volume_trend
          ])

          # HMM 모델로 체제 분류
          hmm_model = GaussianHMM(n_components=4)  # 4개 체제
          regime_states = hmm_model.fit_predict(regime_features)

          # 체제별 특성 분석
          regime_characteristics = {
              0: "저거래량_안정",      # Low volume, stable
              1: "고거래량_급변동",    # High volume, volatile
              2: "중간거래량_상승",    # Medium volume, trending up
              3: "중간거래량_하락"     # Medium volume, trending down
          }

          return regime_states, regime_characteristics

      # 현재 체제에 따른 전략 조정
      current_regime = classify_current_volume_regime()

      IF current_regime == "고거래량_급변동":
          고변동성 체제: 단기 스칼핑 전략 활성화
      ELIF current_regime == "저거래량_안정":
          안정 체제: 장기 포지션 구축 기회
      ```

      거래량 SMA 패턴을 기반으로 시장 체제를 자동으로 분류하고, 각 체제에 최적화된 거래 전략을 적용합니다.

      ## 멀티 에셋 거래량 SMA 상관관계 분석
      ```python
      # 포트폴리오 차원의 거래량 분석
      def analyze_cross_asset_volume_correlation(asset_volumes, asset_smas):
          """여러 자산의 거래량 SMA 상관관계 분석"""

          # 정규화된 거래량 계산
          normalized_volumes = {}
          for asset in asset_volumes:
              normalized_volumes[asset] = asset_volumes[asset] / asset_smas[asset]

          # 상관관계 매트릭스 계산
          correlation_matrix = calculate_correlation_matrix(normalized_volumes)

          # 시장 전체 거래량 응집도
          market_cohesion = calculate_average_correlation(correlation_matrix)

          return {
              'correlation_matrix': correlation_matrix,
              'market_cohesion': market_cohesion,
              'divergent_assets': identify_divergent_assets(correlation_matrix)
          }

      # 포트폴리오 수준 거래량 분석
      cross_volume_analysis = analyze_cross_asset_volume_correlation(volumes, smas)

      IF cross_volume_analysis['market_cohesion'] > 0.8:
          높은 시장 응집도: 시스템적 위험 또는 기회
      ```

      여러 자산의 거래량 SMA를 종합 분석하여 시장 전체의 유동성 패턴과 자산 간 연관성을 파악합니다.

      이러한 고급 기법들은 단순한 거래량 평균을 넘어서 거래량 SMA를 정교한 시장 분석 도구로 발전시켜 기관투자자 수준의 유동성 분석을 가능하게 합니다.
