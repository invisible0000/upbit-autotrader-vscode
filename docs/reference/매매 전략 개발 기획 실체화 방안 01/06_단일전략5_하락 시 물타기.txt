네, 문서 시리즈의 다음 장을 생성하겠습니다.

요약표의 5번에 해당하는 **규칙 \#5: 하락 시 물타기** 문서입니다.

````markdown
# 문서 #6: 규칙 #5 구현 - 하락 시 물타기 (SCALE_IN)

---

### ## 1. 규칙 개요 (Rule Overview)

이 규칙의 목적은 **포지션 진입 후 가격이 예상과 달리 하락했을 때, 추가 매수를 통해 평균 매입 단가를 낮추는 것**입니다. 이를 통해 손익분기점을 낮추고, 작은 반등에도 수익으로 전환할 기회를 만드는 리스크 관리 기법입니다. (이 기법은 하락 추세에서 손실을 키울 수 있는 위험도 내포합니다.)

* **역할 (Role):** `SCALE_IN`
* **활성화 상태 (Activation State):** `ACTIVE` (포지션 보유 중에만 작동)
* **핵심 컴포넌트 (Core Components):** `PriceChangeTrigger`, `ExecutionCountCondition`, `AdditionalBuy`

---

### ## 2. 컴포넌트 구성 (Component Configuration)

이 규칙은 `트리거`, `추가 조건`, `액션` 컴포넌트의 조합으로 구성됩니다. 이는 `COMPONENT_SYSTEM_ARCHITECTURE.md`에 예시된 '물타기 전략'의 구체적인 구현입니다.

```json
{
  "rule_id": "downward_averaging_on_dip",
  "description": "평단가 대비 5% 하락 시, 2회까지 20만원 추가 매수",
  "activation_state": "ACTIVE",
  "trigger": {
    "component": "PriceChangeTrigger",
    "config": {
      "reference": "average_price",
      "change_percent": -5,
      "direction": "below"
    }
  },
  "conditions": [
    {
      "component": "MaxCountCondition",
      "config": {
        "target_rule_id": "downward_averaging_on_dip",
        "max_count": 2
      }
    }
  ],
  "action": {
    "component": "AdditionalBuy",
    "config": {
      "amount": 200000
    }
  }
}
````

#### **2.1. 트리거 설정 (`PriceChangeTrigger`)**

  * `component: "PriceChangeTrigger"`: 가격 변화를 감지하는 컴포넌트를 사용합니다.
  * `reference: "average_price"`: 가격 변화를 계산할 기준점으로, 고정된 진입가가 아닌 실시간으로 변하는 '평균 매입 단가'를 사용합니다.
  * `change_percent: -5`: 평단가 대비 가격이 -5%가 되었을 때를 발동 조건으로 설정합니다.
  * `direction: "below"`: 현재가가 기준가 대비 설정된 퍼센트만큼 **아래로** 떨어졌을 때 트리거가 발동하도록 합니다.

#### **2.2. 추가 조건 설정 (`MaxCountCondition`)**

  * `component: "MaxCountCondition"`: 규칙의 최대 실행 횟수를 제한하는 조건 컴포넌트입니다.
  * `target_rule_id: "downward_averaging_on_dip"`: 자기 자신의 실행 횟수를 추적합니다.
  * `max_count: 2`: 물타기는 최대 2번까지만 실행되도록 제한하여 무한한 추가 매수로 인한 리스크를 방지합니다.

#### **2.3. 액션 설정 (`AdditionalBuy`)**

  * `component: "AdditionalBuy"`: 기존 포지션에 수량을 더하는 액션 컴포넌트입니다.
  * `amount: 200000`: 조건 충족 시, 20만 원을 추가로 매수하여 평단을 낮춥니다.

-----

### \#\# 3. 실행 엔진에서의 동작 방식

1.  **감시 시작**: 포지션이 `ACTIVE` 상태가 되면 `ExecutionEngine`이 이 규칙을 활성화합니다.
2.  **트리거 평가**: 엔진은 매 틱마다 현재가가 포지션의 실시간 평단가 대비 얼마나 하락했는지 계산하여 `PriceChangeTrigger`의 조건(-5%)을 검사합니다.
3.  **추가 조건 검사**: 트리거 조건이 충족되면, 엔진은 `MaxCountCondition`을 통해 이 규칙의 실행 횟수가 2회 미만인지 확인합니다.
4.  **액션 실행**: 두 조건이 모두 참이면, 엔진은 `AdditionalBuy` 액션을 실행합니다.
5.  **상태 업데이트**: 추가 매수 체결 후, 새로운 수량과 매입가를 반영하여 포지션의 `평균 매입 단가(average_price)`가 더 낮은 값으로 재계산됩니다. 이 규칙의 실행 횟수 카운터도 1 증가합니다.
6.  **반복 또는 중지**: 이후, 다시 낮아진 **새로운 평단가**를 기준으로 -5% 하락이 발생하면 규칙은 다시 발동될 수 있습니다(최대 2회까지).

<!-- end list -->

```
```