네, 문서 시리즈의 다음 장을 생성하겠습니다.

마지막 7번째 규칙을 추가하여, 우리가 논의한 모든 개념이 집약된 최종 전략을 완성하는 예시입니다. **문서 \#14**입니다.

```markdown
# 문서 #14: 조합 예시 6 - 최종 완성 (규칙 #1 ~ #7)

---

### ## 1. 조합 구성 변경 (Combination Composition Change)

`문서 #13`의 조합에, 비이성적인 과열에 대응하는 마지막 퍼즐 조각, **'급등 홀드' 규칙을 추가하여 7개 규칙으로 이루어진 최종 전략을 완성**합니다.

* **기존 규칙**
    * **규칙 #1 ~ #6**
* **새로 추가된 규칙**
    * **규칙 #7**: `급등 홀드 (MANAGEMENT)` - **Priority: 1**

이제 이 전략은 평범한 상승/하락, 점진적인 추세, 갑작스러운 폭락, 그리고 비정상적인 급등이라는 거의 모든 시장 상황에 대해 구체적인 대응 계획을 갖추게 되었습니다.

---

### ## 2. 핵심 상호작용: 메타 제어 (Core Interaction: Meta Control)

이 조합의 가장 진보된 상호작용은 **한 규칙이 다른 규칙의 작동 조건을 동적으로 제어**하는 '메타 제어'입니다.

1.  **'급등 홀드(규칙 #7)' 발동**: `RapidPriceSpikeTrigger`가 급등을 감지합니다.
2.  **우선순위 실행**: 높은 우선순위(`priority: 1`) 덕분에 다른 관리 규칙보다 먼저 `ModifyContextAction`이 실행됩니다.
3.  **'컨텍스트' 상태 변경**: 이 액션은 `실행 컨텍스트(ExecutionContext)`라는 공유 메모리의 `is_pyramiding_paused` 플래그를 `True`로 설정합니다.
4.  **'불타기' 규칙 제어**: `불타기(규칙 #2)`는 자신의 `조건(Condition)` 중 하나로 `is_pyramiding_paused` 플래그가 `False`인지를 항상 검사합니다.
5.  **결과**: 플래그가 `True`로 바뀌었기 때문에, `불타기` 규칙은 더 이상 발동 조건을 만족할 수 없어 **자동으로 비활성화(홀드)**됩니다.

이처럼 직접적인 신호 충돌 없이도, 우선순위와 공유 컨텍스트를 통해 규칙 간의 정교한 상호작용을 구현할 수 있습니다.

---

### ## 3. 시나리오: '불타기'와 '급등 홀드'의 충돌

1.  **진입**: 포지션이 `ACTIVE` 상태입니다.
2.  **급등 발생**: 30초라는 짧은 시간 안에 가격이 **+5%** 이상 폭등합니다.
3.  **충돌 발생**: 이 한 번의 실행 사이클에서 다음 두 규칙의 트리거가 모두 `True`가 됩니다.
    * **규칙 #2 (불타기)**: 수익률이 5%를 넘었으므로 발동.
    * **규칙 #7 (급등 홀드)**: 1분 내 5% 이상 급등했으므로 발동.
4.  **우선순위 해결**: `ExecutionEngine`은 '실행 후보 리스트' `[규칙 #2, 규칙 #7]`를 `priority`로 정렬하여 `[규칙 #7, 규칙 #2]` 순서로 만듭니다.
5.  **메타 액션 실행**: 엔진은 리스트의 첫 번째인 **`규칙 #7`의 `ModifyContextAction`을 실행**합니다.
    * `실행 컨텍스트`의 `is_pyramiding_paused` 플래그가 `True`가 됩니다.
    * `규칙 #2`의 `AdditionalBuy` 액션은 무시됩니다.

> ✅ 최종적으로, 시스템은 과열된 시장에 대한 추격 매수를 스스로 멈춥니다. 이제 투자자를 보호하는 것은 오직 `규칙 #4 (트레일링 스탑)` 뿐이며, 시스템은 급등으로 얻은 수익을 지키는 데에만 집중하게 됩니다. 이로써 매우 지능적이고 강건한(Robust) 자동 매매 전략이 완성되었습니다.
```