네, 문서 시리즈의 다음 장을 생성하겠습니다.

이제 조합에 **최상위 리스크 관리 규칙**을 추가하여, 예측 불가능한 시장 상황에 대한 시스템의 방어력을 완성하는 예시입니다. **문서 \#13**입니다.

```markdown
# 문서 #13: 조합 예시 5 - 급락 감지 규칙 추가 (규칙 #1 ~ #6)

---

### ## 1. 조합 구성 변경 (Combination Composition Change)

`문서 #12`의 조합은 상승과 하락 양방향에 대응할 수 있지만, '폭락'과 같은 이례적인 시장 상황에 대한 최종 안전장치가 부족합니다. 여기에 **모든 규칙에 우선하는 '급락 감지' 규칙을 추가**합니다.

* **기존 규칙**
    * **규칙 #1**: `RSI 과매도 진입 (ENTRY)`
    * **규칙 #2**: `수익 시 불타기 (SCALE_IN)`
    * **규칙 #3**: `계획된 익절 (EXIT)`
    * **규칙 #4**: `트레일링 스탑 (EXIT)`
    * **규칙 #5**: `하락 시 물타기 (SCALE_IN)`
* **새로 추가된 규칙**
    * **규칙 #6**: `급락 감지 (EXIT / RISK_MGMT)` - **Priority: 0**

---

### ## 2. 핵심 상호작용: 절대적 우선순위 (Core Interaction: Absolute Priority)

이 조합의 핵심은 `규칙 #6`이 가진 **절대적인 우선순위**입니다. `ExecutionEngine`은 신호 충돌이 발생했을 때, 이 우선순위 규칙에 따라 행동합니다.

1.  **규칙 평가 및 수집**: 한 실행 사이클 내에서, 엔진은 활성화된 모든 규칙을 평가하고 발동 조건이 `True`가 된 규칙들을 모두 '실행 후보 리스트'에 담습니다.
2.  **우선순위 정렬**: 액션을 실행하기 직전, 엔진은 이 '실행 후보 리스트'를 각 규칙이 가진 `priority` 값에 따라 내림차순으로 정렬합니다. (`priority: 0`인 규칙 #6이 항상 리스트의 맨 위로 옵니다.)
3.  **최종 선택**: 엔진은 정렬된 리스트에서 **가장 위에 있는 단 하나의 규칙만을 실행**하고, 나머지 후보들은 해당 사이클에서 모두 무시합니다.

이 메커니즘을 통해 `규칙 #6`은 다른 어떤 규칙(심지어 물타기 규칙)보다 항상 먼저 실행될 권한을 갖게 됩니다.

---

### ## 3. 시나리오: '물타기'와 '급락 감지'의 충돌

1.  **진입**: `규칙 #1`로 진입 후 포지션 상태가 `ACTIVE`가 되어, 모든 관리/청산 규칙이 활성화됩니다.
2.  **폭락장 발생**: 가격이 안정적으로 -5% 하락한 것이 아니라, **단 한 번의 데이터 틱**으로 순식간에 -6% 폭락했습니다.
3.  **충돌 발생**: 이 한 번의 틱 동안, `ExecutionEngine`은 다음 두 규칙의 조건이 모두 `True`임을 발견합니다.
    * **규칙 #5 (물타기)**: 평단가 대비 -5% 이상 하락했으므로 발동.
    * **규칙 #6 (급락 감지)**: 단일 주기 내에 -5% 이상 하락했으므로 발동.
4.  **우선순위에 따른 해결**:
    * 엔진은 '실행 후보 리스트'에 `[규칙 #5, 규칙 #6]`을 담습니다.
    * 리스트를 `priority`로 정렬하면 `[규칙 #6, 규칙 #5]` 순서가 됩니다.
    * 엔진은 리스트의 첫 번째인 **`규칙 #6`의 `FullPositionSell` 액션을 최종 실행**합니다.
    * `규칙 #5`의 `AdditionalBuy` 액션은 실행되지 않고 무시됩니다.

> ✅ 최종적으로, 시스템은 폭락하는 시장에서 위험하게 자산을 추가 투입('물타기')하는 대신, 가장 먼저 포지션을 전량 청산하여 손실 확산을 막는 가장 안전한 행동을 수행합니다. 이것이 바로 우선순위 기반 리스크 관리의 핵심입니다.
```