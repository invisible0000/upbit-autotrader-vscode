네, 문서 시리즈의 다음 장을 생성하겠습니다.

이제 조합에 **손실 상황에 대응하는 규칙**을 추가하여, 상승과 하락 양방향 시나리오에 모두 대처할 수 있도록 전략을 보강해 보겠습니다. **문서 \#12**입니다.

```markdown
# 문서 #12: 조합 예시 4 - 하락 시 물타기 추가 (규칙 #1 ~ #5)

---

### ## 1. 조합 구성 변경 (Combination Composition Change)

지금까지의 조합은 진입 후 가격이 상승하는 시나리오에만 집중했습니다. 여기에 **진입 후 하락 시나리오에 대응하는 '물타기' 규칙을 추가**하여 전략의 생존성과 유연성을 높입니다.

* **기존 규칙**
    * **규칙 #1**: `RSI 과매도 진입 (ENTRY)`
    * **규칙 #2**: `수익 시 불타기 (SCALE_IN)`
    * **규칙 #3**: `계획된 익절 (EXIT)`
    * **규칙 #4**: `트레일링 스탑 (EXIT)`
* **새로 추가된 규칙**
    * **규칙 #5**: `하락 시 물타기 (SCALE_IN)`

---

### ## 2. 핵심 상호작용: 양방향 시나리오 대응 (Core Interaction: Responding to Two-Way Scenarios)

이 조합의 핵심은 진입(`ACTIVE` 상태) 이후, **서로 다른 방향성의 트리거를 가진 규칙들이 동시에 대기**한다는 점입니다.

> **"진입 후, 가격이 오르는가? 아니면 내리는가?"**

`ExecutionEngine`은 이 질문에 따라 어떤 규칙을 활성화할지 결정합니다.

* **가격 상승 시**: 수익률 기반의 `규칙 #2, #3, #4`가 작동할 준비를 합니다. `규칙 #5`는 손실 조건이 아니므로 계속 대기합니다.
* **가격 하락 시**: 손실률 기반의 `규칙 #5`가 작동할 준비를 합니다. 수익 기반 규칙들은 모두 대기합니다.

이로써 전략은 상승과 하락이라는 갈림길 모두에 대한 대응 계획을 갖추게 됩니다.

---

### ## 3. 시나리오: 진입 후 하락 및 물타기 후 반등

1.  **진입**: `규칙 #1`로 진입하여 포지션 상태가 `ACTIVE`가 됩니다. 시스템은 이제 규칙 #2, #3, #4, #5를 동시에 감시합니다.

2.  **하락 및 물타기**: 예상과 달리 가격이 하락하여 평단가 대비 **-5%**가 됩니다.
    * `규칙 #5`의 `PriceChangeTrigger`가 `True`를 반환합니다.
    * 수익 기반 규칙들(#2, #3, #4)은 조건이 맞지 않아 모두 `False`를 반환합니다.
    * 엔진은 **`규칙 #5`의 `AdditionalBuy` 액션을 실행**하여 '물타기'를 합니다.

3.  **상태 업데이트**: 포지션의 평균 매입 단가는 낮아지고, 보유 수량은 늘어납니다. 이 과정에서 `규칙 #4(트레일링 스탑)`는 수익 5%라는 활성화 조건 자체가 충족된 적이 없으므로 전혀 개입하지 않았습니다.

4.  **반등 및 역할 교대**: 이후 시장이 반등하여 가격이 상승하기 시작합니다.
    * 물타기로 평단가가 낮아졌기 때문에, 더 작은 가격 상승으로도 수익권에 진입할 수 있습니다.
    * 가격이 계속 올라 **새로운 평단가** 대비 수익률이 5%에 도달하면, 이제는 `규칙 #2(불타기)`와 `규칙 #4(트레일링 스탑)`가 작동할 수 있는 조건이 됩니다.

5.  **이후 흐름**: 시스템은 이제 다시 수익 관리 모드로 전환되어, `문서 #11`에서 설명한 것과 같이 불타기를 하거나 트레일링 스탑으로 이익을 보호하는 로직을 수행하게 됩니다.

> ✅ '물타기' 규칙의 추가로, 초기에 불리하게 시작된 거래에도 회복의 기회를 제공하여 전략의 전반적인 강건함(Robustness)을 크게 향상시켰습니다.

```