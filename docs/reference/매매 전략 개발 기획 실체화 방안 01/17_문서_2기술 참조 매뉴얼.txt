네, 바이브 코딩 에이전트 전달을 위한 최종 문서 시리즈의 두 번째 문서를 생성하겠습니다.

**문서 2: 기술 참조 매뉴얼**입니다.

````markdown
# 바이브 코딩 에이전트 전달 문서 2/3: 기술 참조 매뉴얼

---

### ## 1. 컴포넌트 카탈로그 (Component Catalog) 🧩

이 시스템에서 사용할 수 있는 모든 아토믹 컴포넌트의 목록입니다. 각 컴포넌트는 독립적인 기능을 수행하는 최소 단위의 부품입니다.

#### **1.1. 트리거 컴포넌트 (Trigger Components)**

> 특정 조건 만족 시 신호를 발생시키는 컴포넌트.

* **Price 카테고리**
    * `PriceChangeTrigger`: 가격 변동율 감지
    * `PriceBreakoutTrigger`: 가격 범위 돌파 감지
    * `PriceCrossoverTrigger`: 가격 기준선 교차 감지
* **Indicator 카테고리**
    * `RSITrigger`: RSI 과매수/과매도 감지
    * `MACDTrigger`: MACD 시그널 감지
    * `BollingerBandTrigger`: 볼린저 밴드 터치 감지
    * `MovingAverageCrossTrigger`: 이동평균 교차 감지
* **Time 카테고리**
    * `PeriodicTrigger`: 주기적 실행
    * `ScheduledTrigger`: 특정 시간 실행
    * `DelayTrigger`: 지연 후 실행
* **Volume 카테고리**
    * `VolumeSurgeTrigger`: 거래량 급증 감지
    * `VolumeDropTrigger`: 거래량 급락 감지
    * `RelativeVolumeTrigger`: 상대적 거래량 감지
    * `VolumeBreakoutTrigger`: 거래량 돌파 감지
* **Position 카테고리**
    * `ProfitLossTrigger`: 수익/손실률 감지 (트레일링 기능 포함)
* **Special 카테고리**
    * `RapidPriceDropTrigger`: 단기 가격 급락 감지
    * `RapidPriceSpikeTrigger`: 단기 가격 급등 감지

#### **1.2. 액션 컴포넌트 (Action Components)**

> 트리거 발생 시 실제 행동을 수행하는 컴포넌트.

* **거래 액션**
    * `MarketBuyAction`: 시장가 매수
    * `MarketSellAction`: 시장가 매도
    * `PositionCloseAction`: 포지션 청산
    * `AdditionalBuy`: 추가 매수 (물타기/불타기)
* **메타 액션 (Meta Actions)**
    * `ModifyContextAction`: 실행 컨텍스트의 상태 플래그를 변경

#### **1.3. 조건 컴포넌트 (Condition Components)**

> 트리거와 액션 사이의 추가 검증 로직.

* **검증 조건**
    * `ExecutionCountCondition`: 특정 규칙의 실행 횟수 검증
    * `ContextCondition`: 실행 컨텍스트의 플래그 상태 검증

---

### ## 2. 핵심 클래스 구조 🏛️

시스템 구동에 필요한 최소한의 필수 클래스 구조입니다.

* **`BaseTrigger` / `BaseAction` / `BaseCondition`**: 모든 컴포넌트가 상속받는 추상 기반 클래스. `evaluate()` 또는 `execute()`와 같은 행동 규약을 정의합니다.
* **`StrategyRule`**: `트리거`, `조건`, `액션` 컴포넌트 객체와 `활성화 상태`, `우선순위`를 하나로 묶는 데이터 컨테이너 클래스입니다.
* **`Position`**: `state`, `average_price`, `quantity` 등 자신의 상태와 데이터를 관리하는 상태 머신(State Machine) 객체입니다.
* **`ExecutionEngine`**: 시장 데이터를 받아, `Position`의 상태에 맞는 `StrategyRule`들을 평가하고 최종 액션을 실행하는 시스템의 심장입니다.

---

### ## 3. 데이터베이스 스키마 💾

컴포넌트 기반 전략의 유연성을 위해, 핵심 데이터는 TEXT 필드에 JSON 형식으로 저장됩니다.

* **`component_strategy`**: 사용자가 '전략 메이커'에서 생성한 전략의 정의를 저장합니다.
    ```sql
    CREATE TABLE component_strategy (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT,
        -- 트리거, 액션, 연결 정보를 JSON 배열 형태로 저장
        triggers TEXT,
        actions TEXT,
        connections TEXT,
        tags TEXT,
        is_active BOOLEAN DEFAULT FALSE,
        created_at DATETIME,
        updated_at DATETIME
    );
    ```
* **`strategy_execution`**: 전략이 실행될 때마다의 기록을 저장합니다.
    ```sql
    CREATE TABLE strategy_execution (
        id TEXT PRIMARY KEY,
        strategy_id TEXT REFERENCES component_strategy(id),
        trigger_type TEXT,
        action_type TEXT,
        result TEXT, -- SUCCESS, FAILED, SKIPPED
        position_tag TEXT,
        executed_at DATETIME
    );
    ```

---

### ## 4. 포지션 상태 머신 (Position State Machine) ⚙️

모든 포지션은 다음 3가지 상태 중 하나를 가지며, 이 상태에 따라 실행 엔진이 활성화하는 규칙이 달라집니다.

* **`READY` (대기 상태)**
    * **설명**: 포지션이 없으며 진입 신호를 기다리는 초기 상태입니다.
    * **활성화 규칙**: `ENTRY` 역할을 가진 규칙만이 작동합니다.

* **`ACTIVE` (보유 상태)**
    * **설명**: 코인을 보유 중이며, 수익 관리, 리스크 관리, 청산 신호를 기다리는 상태입니다.
    * **활성화 규칙**: `SCALE_IN`, `SCALE_OUT`, `EXIT`, `MANAGEMENT` 역할을 가진 모든 규칙이 동시에 작동합니다.

* **`CLOSED` (청산 상태)**
    * **설명**: 포지션이 모두 청산되어 하나의 매매 사이클이 종료된 상태입니다.
    * **활성화 규칙**: 모든 규칙이 비활성화되며, 최종 성과를 기록하고 다음 사이클을 위해 `READY` 상태로 돌아갈 수 있습니다.
````