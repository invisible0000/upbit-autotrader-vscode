네, 문서 시리즈의 다음 장을 생성하겠습니다.

요약표의 3번에 해당하는 **규칙 \#3: 계획된 익절** 문서입니다.

````markdown
# 문서 #4: 규칙 #3 구현 - 계획된 익절 (EXIT)

---

### ## 1. 규칙 개요 (Rule Overview)

이 규칙의 목적은 **'수익 시 불타기(규칙 #2)'가 계획된 횟수를 모두 성공적으로 마쳤을 때, 다음 수익 신호에 포지션 전체를 청산하여 이익을 실현**하는 것입니다. 이는 성공적인 트레이딩 사이클을 마무리하는 역할을 합니다.

* **역할 (Role):** `EXIT`
* **활성화 상태 (Activation State):** `ACTIVE` (포지션 보유 중에만 작동)
* **핵심 컴포넌트 (Core Components):** `ProfitLossTrigger`, `ExecutionCountCondition`, `FullPositionSell`

---

### ## 2. 컴포넌트 구성 (Component Configuration)

이 규칙은 '수익 시 불타기' 규칙과 동일한 `트리거`를 공유하지만, `추가 조건`과 `액션`이 다릅니다. 이 차이점이 두 규칙의 역할을 명확히 구분합니다.

```json
{
  "rule_id": "exit_after_pyramiding_complete",
  "description": "3회 추가 매수 완료 후, 다음 5% 수익 신호에 전량 익절",
  "activation_state": "ACTIVE",
  "trigger": {
    "component": "ProfitLossTrigger",
    "config": {
      "profit_percent": 5,
      "direction": "above"
    }
  },
  "conditions": [
    {
      "component": "ExecutionCountCondition",
      "config": {
        "target_rule_id": "scale_in_on_profit",
        "equal_to": 3
      }
    }
  ],
  "action": {
    "component": "FullPositionSell",
    "config": {}
  }
}
````

#### **2.1. 트리거 설정 (`ProfitLossTrigger`)**

  * `component: "ProfitLossTrigger"`: 규칙 \#2와 동일한 수익률 감시 컴포넌트를 사용하여, 같은 신호 주기에 반응하도록 합니다.
  * `profit_percent: 5`: 동일하게 5% 수익률을 기준으로 설정합니다.

#### **2.2. 추가 조건 설정 (`ExecutionCountCondition`)**

  * `component: "ExecutionCountCondition"`: 규칙의 실행 횟수를 검사하는 컴포넌트입니다.
  * `target_rule_id: "scale_in_on_profit"`: **규칙 \#2의 ID**를 참조하여, 불타기 규칙이 몇 번 실행되었는지를 확인합니다.
  * `equal_to: 3`: 불타기 규칙의 실행 횟수가 정확히 3회일 경우에만 조건을 통과시킵니다. 이것이 이 규칙을 활성화하는 핵심 키입니다.

#### **2.3. 액션 설정 (`FullPositionSell`)**

  * `component: "FullPositionSell"`: 포지션 전체를 시장가로 청산하는 액션 컴포넌트입니다.
  * `config: {}`: 전량 매도이므로 별도의 파라미터가 필요 없습니다.

-----

### \#\# 3. 실행 엔진에서의 동작 방식

1.  **전제 조건**: 포지션 상태는 `ACTIVE`이며, '규칙 \#2(불타기)'가 이미 3번 실행되어 내부 실행 카운트가 `3`이 된 상태입니다.
2.  **감시 시작**: `ExecutionEngine`은 규칙 \#2와 규칙 \#3을 포함한 모든 `ACTIVE` 상태의 규칙들을 계속 감시합니다.
3.  **트리거 평가**: 가격이 다시 상승하여 다음 5% 수익 구간에 도달하면, 두 규칙의 `ProfitLossTrigger`가 동시에 `True` 신호를 보냅니다.
4.  **조건 분기**:
      * **규칙 \#2 (불타기)**: `ExecutionCountCondition`을 검사합니다. `실행 횟수 < 3` 조건이 `3 < 3` 이므로 \*\*거짓(False)\*\*이 되어 규칙이 중단됩니다.
      * **규칙 \#3 (계획된 익절)**: `ExecutionCountCondition`을 검사합니다. `실행 횟수 == 3` 조건이 `3 == 3` 이므로 \*\*참(True)\*\*이 되어 규칙이 계속 진행됩니다.
5.  **액션 실행**: 엔진은 조건까지 통과한 규칙 \#3의 `FullPositionSell` 액션을 실행합니다.
6.  **사이클 종료**: 포지션이 전량 매도되고 상태가 `CLOSED`로 변경됩니다. 이로써 하나의 완전한 매매 사이클이 성공적으로 종료됩니다.

<!-- end list -->

```
```