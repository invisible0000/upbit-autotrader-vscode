네, 알겠습니다. 이제부터 '다음'이라고 하시면 계획한 순서대로 문서를 한 장씩 만들어 드리겠습니다. 각 문서는 독립적으로 복사하여 사용할 수 있도록 코드 블록 형식으로 제공하겠습니다.

첫 번째로, 요약표의 1번에 해당하는 **규칙 \#1: RSI 과매도 진입** 문서입니다.

````markdown
# 문서 #2: 규칙 #1 구현 - RSI 과매도 진입 (ENTRY)

---

### ## 1. 규칙 개요 (Rule Overview)

이 규칙의 목적은 **시장이 과매도 상태에 진입했을 때 새로운 포지션을 시작**하는 것입니다. 이는 대표적인 역추세 진입 전략의 컴포넌트 구현입니다.

* **역할 (Role):** `ENTRY`
* **활성화 상태 (Activation State):** `READY` (포지션이 없는 상태에서만 작동)
* **핵심 컴포넌트 (Core Components):** `RSITrigger`, `MarketBuyAction`

---

### ## 2. 컴포넌트 구성 (Component Configuration)

이 규칙은 하나의 `트리거`와 하나의 `액션` 컴포넌트로 구성됩니다. 아래는 데이터베이스에 저장되거나 실행 엔진으로 전달될 때의 JSON 데이터 구조 예시입니다.

```json
{
  "rule_id": "entry_rsi_oversold",
  "description": "RSI가 20 이하로 하락 시, 자산의 10%를 시장가 매수하여 진입",
  "activation_state": "READY",
  "trigger": {
    "component": "RSITrigger",
    "config": {
      "period": 14,
      "threshold": 20,
      "direction": "below"
    }
  },
  "action": {
    "component": "MarketBuyAction",
    "config": {
      "amount_percent": 10,
      "position_tag": "AUTO"
    }
  }
}
````

#### **2.1. 트리거 설정 (`RSITrigger`)**

  * `component: "RSITrigger"`: RSI 지표의 특정 조건을 감시하는 컴포넌트를 사용합니다.
  * `period: 14`: RSI 값을 계산할 때 사용할 기간을 14로 설정합니다.
  * `threshold: 20`: 과매도 상태를 판단할 임계값을 20으로 설정합니다.
  * `direction: "below"`: RSI 값이 임계값(20) **아래로** 내려갔을 때 트리거가 발동하도록 설정합니다.

#### **2.2. 액션 설정 (`MarketBuyAction`)**

  * `component: "MarketBuyAction"`: 시장가 매수를 실행하는 컴포넌트를 사용합니다.
  * `amount_percent: 10`: 전체 가용 자산의 10%에 해당하는 금액만큼 매수합니다.
  * `position_tag: "AUTO"`: 이 액션으로 생성된 포지션에는 'AUTO' 태그를 부여하여, 이후 자동 전략만이 관리할 수 있도록 합니다.

-----

### \#\# 3. 실행 엔진에서의 동작 방식

1.  **감시 시작**: `ExecutionEngine`은 현재 포지션의 상태가 `READY`인 것을 확인하고, 이 규칙을 활성화하여 시장을 감시하기 시작합니다.
2.  **트리거 평가**: 새로운 시장 데이터 틱이 들어올 때마다, 엔진은 `RSITrigger`의 `evaluate()` 메서드를 호출합니다.
3.  **조건 충족**: `evaluate()` 메서드는 현재 14기간 RSI 값이 20 미만인지 확인합니다. 만약 RSI가 19.5로 계산되면, 메서드는 `True`를 반환합니다.
4.  **액션 실행**: 트리거가 `True`를 반환하면, 엔진은 이 규칙에 연결된 `MarketBuyAction`의 `execute()` 메서드를 호출합니다.
5.  **상태 전환**: `execute()` 메서드는 자산의 10%만큼 시장가 매수 주문을 실행합니다. 주문이 성공적으로 체결되면, 포지션 객체의 상태를 `READY`에서 \*\*`ACTIVE`\*\*로 변경합니다.
6.  **규칙 비활성화**: 다음 데이터 틱부터 포지션의 상태는 `ACTIVE`이므로, `activation_state`가 `READY`인 이 규칙은 더 이상 활성화되지 않습니다.

<!-- end list -->

```
```