네, 바이브 코딩 에이전트 전달을 위한 최종 문서 시리즈를 시작하겠습니다.

첫 번째, **문서 1: 아키텍처 개요**입니다.

```markdown
# 바이브 코딩 에이전트 전달 문서 1/3: 아키텍처 개요

---

### ## 1. 시스템 목표 및 설계 철학 🎯

이 프로젝트의 핵심은 기존의 고정된 전략 클래스 방식에서 벗어나, 유연하고 확장 가능한 **아토믹 컴포넌트 시스템**으로 전환하는 것입니다.

우리의 설계 철학은 **"전략을 직접 만드는 것이 아니라, 사용자가 전략을 만들 수 있는 강력한 도구를 제공한다"**는 것입니다. 이를 통해 사용자는 드래그 & 드롭 방식의 비주얼 에디터를 사용하여 무한에 가까운 전략을 직접 구성할 수 있습니다.

---

### ## 2. 핵심 아키텍처: 컴포넌트 시스템 🧩

시스템은 최소 기능 단위인 **아토믹 컴포넌트(Atomic Components)**를 기반으로 구축됩니다. 모든 전략은 이 컴포넌트들의 조합으로 이루어집니다.

#### **2.1. 컴포넌트 분류 체계**

* **트리거 (Trigger):** 시장의 특정 조건(가격, 지표 등)을 감지하여 신호를 발생시킵니다.
* **액션 (Action):** 트리거의 신호를 받아 실제 매수/매도/관리 행동을 실행합니다.
* **조건 (Condition):** 트리거와 액션 사이에서 추가적인 검증 로직을 수행합니다.
* **계산 (Calculator):** 적정 포지션 크기나 손익 등 동적인 값을 계산합니다.

#### **2.2. 아키텍처 계층 구조**

시스템은 다음과 같은 명확한 계층 구조를 따릅니다.

1.  **전략 인스턴스 (Strategy Instance):** 사용자가 만든 하나의 완전한 거래 로직.
2.  **컴포넌트 조합 (Component Combination):** 여러 트리거와 액션의 논리적 연결.
3.  **아토믹 컴포넌트 (Atomic Components):** 시스템의 최소 기능 단위.
4.  **시장 데이터 (Market Data):** 모든 판단의 근거가 되는 데이터.

---

### ## 3. 주요 데이터 흐름 🔄

시스템의 데이터는 다음과 같은 명확한 흐름을 가집니다.

* **저장 흐름**: `사용자 UI 조작 → 내부 상태 업데이트 → ComponentStrategyManager → 데이터베이스`
* **로드 흐름**: `데이터베이스 → ComponentStrategyManager → UI 상태 복원 → 화면 렌더링`

여기서 **`ComponentStrategyManager`**는 UI와 데이터베이스 간의 데이터 교환을 총괄하는 핵심 비즈니스 로직입니다.

---

### ## 4. 포지션 관리 시스템 🏷️

전략 간의 충돌을 방지하고 안전한 거래를 보장하기 위해 **태그 기반 포지션 관리 시스템**을 도입합니다.

* **포지션 태그 종류**
    * **AUTO**: 자동 전략 전용 포지션으로, 수동 조작이 금지됩니다.
    * **MANUAL**: 수동 조작 전용 포지션으로, 자동 전략의 접근이 금지됩니다.
    * **HYBRID**: 자동 전략과 수동 조작이 모두 허용되는 혼합 관리 포지션입니다.
    * **LOCKED**: 안전을 위해 모든 자동/수동 조작이 금지된 잠금 포지션입니다.

이러한 접근 제어 매트릭스는 자동 매매 실행 중 사용자의 갑작스러운 개입으로 인해 발생하는 로직 붕괴를 원천적으로 차단하는 핵심적인 안전장치입니다.
```