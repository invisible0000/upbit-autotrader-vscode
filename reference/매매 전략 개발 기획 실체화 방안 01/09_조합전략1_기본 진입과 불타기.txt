네, 문서 시리즈의 다음 장을 생성하겠습니다.

이제부터는 개별 규칙들을 하나씩 조합하여 복잡도를 높여가는 예시를 보여드리겠습니다. 계획에 따라 **문서 \#9**를 생성합니다.

```markdown
# 문서 #9: 조합 예시 1 - 기본 진입과 불타기 (규칙 #1 + #2)

---

### ## 1. 조합 구성 (Combination Composition)

가장 기본적인 "진입 후 관리" 조합입니다. 이 조합은 다음 두 가지 규칙으로 구성됩니다.

* **규칙 #1**: `RSI 과매도 진입 (ENTRY)`
    * **역할**: 포지션이 없을 때(`READY` 상태) 새로운 포지션을 시작합니다.
* **규칙 #2**: `수익 시 불타기 (SCALE_IN)`
    * **역할**: 포지션이 있을 때(`ACTIVE` 상태) 수익률 조건을 만족하면 추가 매수합니다.

---

### ## 2. 핵심 상호작용: 상태 전환 (Core Interaction: State Transition)

이 조합의 핵심은 '충돌'이 아니라, **포지션의 상태(`state`) 변화에 따른 역할 교대**입니다.

1.  **초기 상태**: 포지션의 상태는 `READY`입니다. `ExecutionEngine`은 `activation_state`가 `READY`인 **규칙 #1**만 활성화하여 감시합니다. 규칙 #2는 비활성화 상태입니다.

2.  **진입 발생**: 규칙 #1의 `RSITrigger` 조건이 충족되어 `MarketBuyAction`이 실행됩니다.

3.  **상태 전환**: 매수 주문이 체결되면, 포지션 객체의 상태는 `READY`에서 **`ACTIVE`**로 변경됩니다.

4.  **역할 교대**: 다음 데이터 틱부터 `ExecutionEngine`은 포지션의 `ACTIVE` 상태를 인지합니다.
    * 이제 `activation_state`가 `READY`인 규칙 #1은 비활성화됩니다.
    * 반대로 `activation_state`가 `ACTIVE`인 **규칙 #2**가 활성화되어 시장을 감시하기 시작합니다.

이처럼 시스템은 포지션의 상태 변경을 통해, '진입 담당' 규칙에서 '관리 담당' 규칙으로 자연스럽게 제어권을 넘깁니다.

---

### ## 3. 시나리오: 진입 후 가격 상승 시

1.  **대기**: 포지션 상태는 `READY`. 시스템은 RSI가 20 아래로 떨어지기만을 기다립니다. (규칙 #1 활성)

2.  **진입**: RSI가 19가 되어 규칙 #1이 발동, 10만 원어치 코인이 매수됩니다. 포지션 상태가 `ACTIVE`로 변경됩니다.

3.  **관리**: 이제 시스템은 규칙 #1의 감시를 멈추고, 규칙 #2를 활성화하여 포지션의 수익률을 감시합니다.

4.  **불타기**: 가격이 상승하여 평단가 대비 수익률이 5%에 도달합니다. 규칙 #2가 발동하여 10만 원을 추가 매수합니다. 포지션의 평단가와 수량이 재계산됩니다.

5.  **이후 상태**: 이 조합에는 포지션을 자동으로 청산하는 `EXIT` 역할의 규칙이 없습니다. 따라서 '불타기'가 최대 횟수에 도달한 후에는, 더 이상 어떤 규칙도 발동하지 않고 포지션은 계속 유지됩니다. **(불완전한 조합)**

> 👉 다음 문서에서는 이 불완전한 조합에 `EXIT` 규칙을 추가하여 완전한 매매 사이클을 만들어 보겠습니다.
```