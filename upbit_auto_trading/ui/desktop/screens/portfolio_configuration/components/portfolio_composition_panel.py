"""
Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Íµ¨ÏÑ± Ìå®ÎÑê Ïª¥Ìè¨ÎÑåÌä∏
- ÏûêÏÇ∞ Î∞∞Î∂Ñ ÏãúÍ∞ÅÌôî (ÎèÑÎÑõ Ï∞®Ìä∏)
- ÏûêÏÇ∞ Î™©Î°ù ÌÖåÏù¥Î∏î
- ÏûêÏÇ∞ Ï∂îÍ∞Ä/ÏàòÏ†ï/ÏÇ≠Ï†ú
"""

from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QTableWidget, 
    QTableWidgetItem, QLabel, QMessageBox, QDialog, QDialogButtonBox,
    QFormLayout, QComboBox, QDoubleSpinBox, QLineEdit, QFrame,
    QHeaderView, QAbstractItemView
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont, QPainter, QPen, QBrush, QColor
import math

class PortfolioCompositionPanel(QWidget):
    """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Íµ¨ÏÑ± Ìå®ÎÑê"""
    
    # ÏãúÍ∑∏ÎÑê Ï†ïÏùò
    portfolio_changed = pyqtSignal(dict)  # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î≥ÄÍ≤Ω Ïãú
    portfolio_saved = pyqtSignal()  # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï†ÄÏû• Ïãú
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_portfolio = None
        self.assets = []
        self.init_ui()
    
    def init_ui(self):
        """UI Ï¥àÍ∏∞Ìôî"""
        layout = QVBoxLayout(self)
        
        # Ï†úÎ™© Î∞è Ï†ÄÏû• Î≤ÑÌäº
        header_layout = QHBoxLayout()
        
        title_label = QLabel("üìä Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Íµ¨ÏÑ±")
        title_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #495057;")
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        self.save_btn = QPushButton("üíæ Ï†ÄÏû•")
        self.save_btn.setStyleSheet("""
            QPushButton {
                background-color: #17a2b8;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #138496;
            }
            QPushButton:disabled {
                background-color: #6c757d;
            }
        """)
        self.save_btn.clicked.connect(self.save_portfolio)
        self.save_btn.setEnabled(False)
        header_layout.addWidget(self.save_btn)
        
        layout.addLayout(header_layout)
        
        # ÏûêÏÇ∞ Î∞∞Î∂Ñ Ï∞®Ìä∏
        self.chart_widget = AssetAllocationChart(self)
        self.chart_widget.setFixedHeight(250)
        layout.addWidget(self.chart_widget)
        
        # ÏûêÏÇ∞ Ï∂îÍ∞Ä Î≤ÑÌäº
        self.add_asset_btn = QPushButton("+ ÏûêÏÇ∞ Ï∂îÍ∞Ä")
        self.add_asset_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #218838;
            }
            QPushButton:disabled {
                background-color: #6c757d;
            }
        """)
        self.add_asset_btn.clicked.connect(self.add_asset)
        self.add_asset_btn.setEnabled(False)
        layout.addWidget(self.add_asset_btn)
        
        # ÏûêÏÇ∞ Î™©Î°ù ÌÖåÏù¥Î∏î
        self.assets_table = QTableWidget()
        self.assets_table.setColumnCount(5)
        self.assets_table.setHorizontalHeaderLabels(["ÏΩîÏù∏", "Ï†ÑÎûµ", "ÎπÑÏ§ë(%)", "ÏòàÏÉÅÏàòÏùµÎ•†", "Ïï°ÏÖò"])
        
        # ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº
        self.assets_table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #dee2e6;
                border-radius: 6px;
                background-color: white;
                gridline-color: #e9ecef;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #e9ecef;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 10px;
                border: none;
                border-bottom: 2px solid #dee2e6;
                font-weight: bold;
            }
        """)
        
        # ÌÖåÏù¥Î∏î ÏÑ§Ï†ï
        header = self.assets_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)  # ÏΩîÏù∏
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)  # Ï†ÑÎûµ
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)    # ÎπÑÏ§ë
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)    # ÏòàÏÉÅÏàòÏùµÎ•†
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)    # Ïï°ÏÖò
        
        self.assets_table.setColumnWidth(2, 80)   # ÎπÑÏ§ë
        self.assets_table.setColumnWidth(3, 100)  # ÏòàÏÉÅÏàòÏùµÎ•†
        self.assets_table.setColumnWidth(4, 80)   # Ïï°ÏÖò
        
        self.assets_table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.assets_table.itemChanged.connect(self.on_asset_changed)
        
        layout.addWidget(self.assets_table)
        
        # Ï¥ù ÎπÑÏ§ë ÌëúÏãú
        self.total_weight_label = QLabel("Ï¥ù ÎπÑÏ§ë: 0%")
        self.total_weight_label.setStyleSheet("""
            font-size: 14px; 
            font-weight: bold; 
            color: #dc3545;
            padding: 10px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
        """)
        layout.addWidget(self.total_weight_label)
    
    def load_portfolio(self, portfolio_data):
        """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î°úÎìú"""
        self.current_portfolio = portfolio_data
        self.save_btn.setEnabled(True)
        self.add_asset_btn.setEnabled(True)
        
        # TODO: Ïã§Ï†ú DBÏóêÏÑú Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏûêÏÇ∞ Ï†ïÎ≥¥ Î°úÎìú
        # assets = PortfolioManager.get_portfolio_assets(portfolio_data['id'])
        
        # ÏûÑÏãú Îç∞Ïù¥ÌÑ∞
        if portfolio_data['name'] == "ÏïàÏ†ïÌòï Ìè¨Ìä∏Ìè¥Î¶¨Ïò§":
            self.assets = [
                {"coin": "BTC-KRW", "strategy": "DCA Ï†ÑÎûµ", "weight": 50.0, "expected_return": 12.5},
                {"coin": "ETH-KRW", "strategy": "RSI Ï†ÑÎûµ", "weight": 30.0, "expected_return": 15.2},
                {"coin": "ADA-KRW", "strategy": "MA ÌÅ¨Î°úÏä§", "weight": 20.0, "expected_return": 8.7}
            ]
        elif portfolio_data['name'] == "ÏÑ±Ïû•Ìòï Ìè¨Ìä∏Ìè¥Î¶¨Ïò§":
            self.assets = [
                {"coin": "BTC-KRW", "strategy": "Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú", "weight": 30.0, "expected_return": 18.2},
                {"coin": "ETH-KRW", "strategy": "RSI Ï†ÑÎûµ", "weight": 25.0, "expected_return": 22.1},
                {"coin": "SOL-KRW", "strategy": "MA ÌÅ¨Î°úÏä§", "weight": 20.0, "expected_return": 25.8},
                {"coin": "DOT-KRW", "strategy": "DCA Ï†ÑÎûµ", "weight": 15.0, "expected_return": 14.3},
                {"coin": "ADA-KRW", "strategy": "Ïä§Ïúô Ï†ÑÎûµ", "weight": 10.0, "expected_return": 16.9}
            ]
        else:
            self.assets = [
                {"coin": "BTC-KRW", "strategy": "ÌÖåÏä§Ìä∏ Ï†ÑÎûµ", "weight": 50.0, "expected_return": 10.0},
                {"coin": "ETH-KRW", "strategy": "ÌÖåÏä§Ìä∏ Ï†ÑÎûµ", "weight": 30.0, "expected_return": 12.0}
            ]
        
        self.update_table()
        self.update_chart()
        self.update_total_weight()
        
        # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î≥ÄÍ≤Ω ÏãúÍ∑∏ÎÑê Î∞úÏÜ°
        self.portfolio_changed.emit(self.get_portfolio_data())
    
    def update_table(self):
        """ÏûêÏÇ∞ ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏"""
        self.assets_table.setRowCount(len(self.assets))
        
        for row, asset in enumerate(self.assets):
            # ÏΩîÏù∏
            self.assets_table.setItem(row, 0, QTableWidgetItem(asset['coin']))
            
            # Ï†ÑÎûµ
            self.assets_table.setItem(row, 1, QTableWidgetItem(asset['strategy']))
            
            # ÎπÑÏ§ë
            weight_item = QTableWidgetItem(f"{asset['weight']:.1f}")
            weight_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            self.assets_table.setItem(row, 2, weight_item)
            
            # ÏòàÏÉÅÏàòÏùµÎ•†
            return_item = QTableWidgetItem(f"{asset['expected_return']:.1f}%")
            return_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            return_item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # ÏùΩÍ∏∞ Ï†ÑÏö©
            self.assets_table.setItem(row, 3, return_item)
            
            # ÏÇ≠Ï†ú Î≤ÑÌäº
            delete_btn = QPushButton("ÏÇ≠Ï†ú")
            delete_btn.setStyleSheet("""
                QPushButton {
                    background-color: #dc3545;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 6px;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background-color: #c82333;
                }
            """)
            delete_btn.clicked.connect(lambda checked, r=row: self.remove_asset(r))
            self.assets_table.setCellWidget(row, 4, delete_btn)
    
    def update_chart(self):
        """Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏"""
        self.chart_widget.set_data(self.assets)
        self.chart_widget.update()
    
    def update_total_weight(self):
        """Ï¥ù ÎπÑÏ§ë ÏóÖÎç∞Ïù¥Ìä∏"""
        total = sum(asset['weight'] for asset in self.assets)
        
        if total == 100.0:
            color = "#28a745"  # ÎÖπÏÉâ
            text = f"Ï¥ù ÎπÑÏ§ë: {total:.1f}% ‚úì"
        elif total > 100.0:
            color = "#dc3545"  # Îπ®Í∞ÑÏÉâ
            text = f"Ï¥ù ÎπÑÏ§ë: {total:.1f}% (100% Ï¥àÍ≥º!)"
        else:
            color = "#ffc107"  # ÎÖ∏ÎûÄÏÉâ
            text = f"Ï¥ù ÎπÑÏ§ë: {total:.1f}% (100% ÎØ∏Îßå)"
        
        self.total_weight_label.setText(text)
        self.total_weight_label.setStyleSheet(f"""
            font-size: 14px; 
            font-weight: bold; 
            color: {color};
            padding: 10px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
        """)
    
    def add_asset(self):
        """ÏûêÏÇ∞ Ï∂îÍ∞Ä"""
        dialog = AddAssetDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            asset_data = dialog.get_asset_data()
            self.assets.append(asset_data)
            
            self.update_table()
            self.update_chart()
            self.update_total_weight()
            
            # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î≥ÄÍ≤Ω ÏãúÍ∑∏ÎÑê Î∞úÏÜ°
            self.portfolio_changed.emit(self.get_portfolio_data())
    
    def remove_asset(self, row):
        """ÏûêÏÇ∞ Ï†úÍ±∞"""
        if 0 <= row < len(self.assets):
            asset = self.assets[row]
            
            reply = QMessageBox.question(
                self,
                "ÏûêÏÇ∞ Ï†úÍ±∞",
                f"{asset['coin']} ÏûêÏÇ∞ÏùÑ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ÏóêÏÑú Ï†úÍ±∞ÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                self.assets.pop(row)
                
                self.update_table()
                self.update_chart()
                self.update_total_weight()
                
                # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î≥ÄÍ≤Ω ÏãúÍ∑∏ÎÑê Î∞úÏÜ°
                self.portfolio_changed.emit(self.get_portfolio_data())
    
    def on_asset_changed(self, item):
        """ÏûêÏÇ∞ Ï†ïÎ≥¥ Î≥ÄÍ≤Ω Ïãú Ï≤òÎ¶¨"""
        row = item.row()
        col = item.column()
        
        if col == 2:  # ÎπÑÏ§ë Î≥ÄÍ≤Ω
            try:
                new_weight = float(item.text())
                if 0 <= new_weight <= 100:
                    self.assets[row]['weight'] = new_weight
                    self.update_chart()
                    self.update_total_weight()
                    
                    # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î≥ÄÍ≤Ω ÏãúÍ∑∏ÎÑê Î∞úÏÜ°
                    self.portfolio_changed.emit(self.get_portfolio_data())
                else:
                    QMessageBox.warning(self, "ÏûÖÎ†• Ïò§Î•ò", "ÎπÑÏ§ëÏùÄ 0-100 ÏÇ¨Ïù¥Ïùò Í∞íÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.")
                    item.setText(f"{self.assets[row]['weight']:.1f}")
            except ValueError:
                QMessageBox.warning(self, "ÏûÖÎ†• Ïò§Î•ò", "Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
                item.setText(f"{self.assets[row]['weight']:.1f}")
    
    def save_portfolio(self):
        """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï†ÄÏû•"""
        if not self.current_portfolio:
            return
        
        # TODO: Ïã§Ï†ú DBÏóê Ï†ÄÏû•
        # PortfolioManager.save_portfolio(self.current_portfolio['id'], self.assets)
        
        QMessageBox.information(
            self,
            "Ï†ÄÏû• ÏôÑÎ£å",
            f"'{self.current_portfolio['name']}' Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§."
        )
        
        # Ï†ÄÏû• ÏôÑÎ£å ÏãúÍ∑∏ÎÑê Î∞úÏÜ°
        self.portfolio_saved.emit()
    
    def get_portfolio_data(self):
        """ÌòÑÏû¨ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò"""
        if not self.current_portfolio:
            return {}
        
        return {
            "portfolio": self.current_portfolio,
            "assets": self.assets,
            "total_weight": sum(asset['weight'] for asset in self.assets),
            "expected_return": sum(asset['weight'] * asset['expected_return'] / 100 for asset in self.assets),
            "asset_count": len(self.assets)
        }

class AssetAllocationChart(QWidget):
    """ÏûêÏÇ∞ Î∞∞Î∂Ñ ÎèÑÎÑõ Ï∞®Ìä∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.data = []
        self.colors = [
            QColor("#FF6384"), QColor("#36A2EB"), QColor("#FFCE56"),
            QColor("#4BC0C0"), QColor("#9966FF"), QColor("#FF9F40"),
            QColor("#FF6384"), QColor("#C9CBCF"), QColor("#4BC0C0")
        ]
    
    def set_data(self, assets):
        """Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï"""
        self.data = assets
        self.update()
    
    def paintEvent(self, event):
        """Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞"""
        if not self.data:
            painter = QPainter(self)
            painter.setRenderHint(QPainter.RenderHint.Antialiasing)
            
            # Îπà Ïõê Í∑∏Î¶¨Í∏∞
            rect = self.rect().adjusted(20, 20, -20, -20)
            painter.setPen(QPen(QColor("#dee2e6"), 2))
            painter.setBrush(QBrush(QColor("#f8f9fa")))
            painter.drawEllipse(rect)
            
            # ÌÖçÏä§Ìä∏ ÌëúÏãú
            painter.setPen(QColor("#6c757d"))
            painter.drawText(rect, Qt.AlignmentFlag.AlignCenter, "ÏûêÏÇ∞ÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî")
            return
        
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        # Ï∞®Ìä∏ ÏòÅÏó≠
        rect = self.rect().adjusted(50, 50, -50, -50)
        center = rect.center()
        radius = min(rect.width(), rect.height()) // 2
        inner_radius = radius * 0.6
        
        # Ï¥ù ÎπÑÏ§ë Í≥ÑÏÇ∞
        total_weight = sum(asset['weight'] for asset in self.data)
        if total_weight == 0:
            return
        
        start_angle = 0
        
        for i, asset in enumerate(self.data):
            # Í∞ÅÎèÑ Í≥ÑÏÇ∞ (16Î∂ÑÌï† Îã®ÏúÑ)
            span_angle = int((asset['weight'] / total_weight) * 360 * 16)
            
            # ÏÉâÏÉÅ ÏÑ§Ï†ï
            color = self.colors[i % len(self.colors)]
            painter.setBrush(QBrush(color))
            painter.setPen(QPen(color.darker(120), 1))
            
            # ÎèÑÎÑõ ÏÑ∏Í∑∏Î®ºÌä∏ Í∑∏Î¶¨Í∏∞
            painter.drawPie(rect, start_angle, span_angle)
            
            # Î†àÏù¥Î∏î ÏúÑÏπò Í≥ÑÏÇ∞
            mid_angle = (start_angle + span_angle / 2) / 16
            label_angle = math.radians(mid_angle)
            label_radius = radius * 0.8
            
            label_x = center.x() + label_radius * math.cos(label_angle)
            label_y = center.y() + label_radius * math.sin(label_angle)
            
            # Î†àÏù¥Î∏î Í∑∏Î¶¨Í∏∞
            painter.setPen(QColor("#495057"))
            font = painter.font()
            font.setPointSize(8)
            painter.setFont(font)
            
            label_text = f"{asset['coin'].split('-')[0]}\n{asset['weight']:.1f}%"
            painter.drawText(int(label_x - 20), int(label_y - 10), 40, 20, 
                           Qt.AlignmentFlag.AlignCenter, label_text)
            
            start_angle += span_angle
        
        # Ï§ëÏïô Íµ¨Î©ç Í∑∏Î¶¨Í∏∞
        painter.setBrush(QBrush(self.palette().color(self.backgroundRole())))
        painter.setPen(QPen(self.palette().color(self.backgroundRole())))
        inner_rect = rect.adjusted(radius - inner_radius, radius - inner_radius,
                                  -(radius - inner_radius), -(radius - inner_radius))
        painter.drawEllipse(inner_rect)

class AddAssetDialog(QDialog):
    """ÏûêÏÇ∞ Ï∂îÍ∞Ä ÎåÄÌôîÏÉÅÏûê"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("ÏûêÏÇ∞ Ï∂îÍ∞Ä")
        self.setModal(True)
        self.resize(400, 300)
        self.init_ui()
    
    def init_ui(self):
        """UI Ï¥àÍ∏∞Ìôî"""
        layout = QVBoxLayout(self)
        
        # Ìèº Î†àÏù¥ÏïÑÏõÉ
        form = QFormLayout()
        
        # ÏΩîÏù∏ ÏÑ†ÌÉù
        self.coin_combo = QComboBox()
        self.coin_combo.addItems([
            "BTC-KRW", "ETH-KRW", "ADA-KRW", "DOT-KRW", "SOL-KRW",
            "MATIC-KRW", "AVAX-KRW", "ATOM-KRW", "LINK-KRW", "XRP-KRW"
        ])
        form.addRow("ÏΩîÏù∏:", self.coin_combo)
        
        # Ï†ÑÎûµ ÏÑ†ÌÉù
        self.strategy_combo = QComboBox()
        self.strategy_combo.addItems([
            "DCA Ï†ÑÎûµ", "RSI Ï†ÑÎûµ", "MA ÌÅ¨Î°úÏä§", "Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú", 
            "Ïä§Ïúô Ï†ÑÎûµ", "ÌÖåÏä§Ìä∏ Ï†ÑÎûµ"
        ])
        form.addRow("Ï†ÑÎûµ:", self.strategy_combo)
        
        # ÎπÑÏ§ë ÏûÖÎ†•
        self.weight_spin = QDoubleSpinBox()
        self.weight_spin.setRange(0.1, 100.0)
        self.weight_spin.setValue(10.0)
        self.weight_spin.setSuffix("%")
        form.addRow("ÎπÑÏ§ë:", self.weight_spin)
        
        layout.addLayout(form)
        
        # Î≤ÑÌäº
        buttons = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel
        )
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)
    
    def get_asset_data(self):
        """ÏûÖÎ†•Îêú ÏûêÏÇ∞ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò"""
        return {
            "coin": self.coin_combo.currentText(),
            "strategy": self.strategy_combo.currentText(),
            "weight": self.weight_spin.value(),
            "expected_return": 10.0 + (hash(self.coin_combo.currentText()) % 20)  # ÏûÑÏãú ÏàòÏùµÎ•†
        }
