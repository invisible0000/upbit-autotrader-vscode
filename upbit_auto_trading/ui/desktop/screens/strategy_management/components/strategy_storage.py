"""
Ï†ÑÎûµ Ï†ÄÏû•ÏÜå - ÏôÑÏÑ±Îêú Îß§Îß§ Ï†ÑÎûµÏùÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•/Í¥ÄÎ¶¨
"""

import sqlite3
import json
import uuid
from typing import Dict, Any, List, Optional
from datetime import datetime
import os
import sys
from pathlib import Path

# ÏÉàÎ°úÏö¥ ÌÜµÌï© DB Í≤ΩÎ°ú ÏãúÏä§ÌÖú import
sys.path.append(str(Path(__file__).parent.parent.parent.parent.parent.parent))
try:
    from database_paths import APP_SETTINGS_DB_PATH
    USE_NEW_DB_PATHS = True
except ImportError:
    # Î∞±ÏóÖ: ÏÉà Í≤ΩÎ°ú ÏãúÏä§ÌÖúÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏúºÎ©¥ Í∏∞Ï°¥ Î∞©Ïãù ÏÇ¨Ïö©
    USE_NEW_DB_PATHS = False
    APP_SETTINGS_DB_PATH = "data/app_settings.sqlite3"

class StrategyStorage:
    """ÏôÑÏÑ±Îêú Ï†ÑÎûµÏùÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•/Í¥ÄÎ¶¨ÌïòÎäî ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, db_path: str = None):
        # ÏÉàÎ°úÏö¥ ÌÜµÌï© DB Í≤ΩÎ°ú ÏãúÏä§ÌÖú ÏÇ¨Ïö© (ÌïòÏúÑ Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)
        if db_path is None:
            if USE_NEW_DB_PATHS:
                self.db_path = APP_SETTINGS_DB_PATH  # settings.sqlite3Î°ú Îß§ÌïëÎê®
                print(f"üîó StrategyStorage: ÏÉàÎ°úÏö¥ ÌÜµÌï© DB ÏÇ¨Ïö© - {self.db_path}")
            else:
                self.db_path = "data/app_settings.sqlite3"  # Î†àÍ±∞Ïãú Í≤ΩÎ°ú
                print(f"‚ö†Ô∏è StrategyStorage: Î†àÍ±∞Ïãú DB Í≤ΩÎ°ú ÏÇ¨Ïö© - {self.db_path}")
        else:
            self.db_path = db_path
            print(f"üìÇ StrategyStorage: ÏÇ¨Ïö©Ïûê ÏßÄÏ†ï DB Í≤ΩÎ°ú - {self.db_path}")
        
        self._ensure_database_exists()
        self._ensure_strategy_tables()
    
    def _ensure_database_exists(self):
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎîîÎ†âÌÜ†Î¶¨ Î∞è ÌååÏùº ÏÉùÏÑ±"""
        db_dir = os.path.dirname(self.db_path)
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir, exist_ok=True)
    
    def _ensure_strategy_tables(self):
        """Ï†ÑÎûµ Í¥ÄÎ†® ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # Î©îÏù∏ Ï†ÑÎûµ ÌÖåÏù¥Î∏î (component_strategyÏôÄ Ìò∏Ìôò)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS component_strategy (
                    id TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    description TEXT,
                    triggers TEXT NOT NULL,
                    conditions TEXT,
                    actions TEXT NOT NULL,
                    tags TEXT,
                    category TEXT DEFAULT 'user_created',
                    difficulty TEXT DEFAULT 'intermediate',
                    is_active BOOLEAN NOT NULL DEFAULT 1,
                    is_template BOOLEAN NOT NULL DEFAULT 0,
                    performance_metrics TEXT,
                    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # Ï†ÑÎûµ Ïã§Ìñâ Í∏∞Î°ù ÌÖåÏù¥Î∏î
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS strategy_execution (
                    id TEXT PRIMARY KEY,
                    strategy_id TEXT NOT NULL,
                    symbol TEXT NOT NULL,
                    trigger_type TEXT NOT NULL,
                    action_type TEXT NOT NULL,
                    market_data TEXT,
                    result TEXT NOT NULL,
                    result_details TEXT,
                    position_tag TEXT,
                    executed_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(strategy_id) REFERENCES component_strategy(id)
                );
            """)
            
            # Ï†ÑÎûµ Íµ¨ÏÑ± ÏöîÏÜå ÌÖåÏù¥Î∏î
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS strategy_components (
                    id TEXT PRIMARY KEY,
                    strategy_id TEXT NOT NULL,
                    component_type TEXT NOT NULL,
                    component_data TEXT NOT NULL,
                    order_index INTEGER NOT NULL DEFAULT 0,
                    is_active BOOLEAN NOT NULL DEFAULT 1,
                    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(strategy_id) REFERENCES component_strategy(id)
                );
            """)
            
            conn.commit()
            print("‚úÖ Ï†ÑÎûµ ÌÖåÏù¥Î∏î Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
    
    def save_strategy(self, strategy_data: Dict[str, Any]) -> str:
        """Ï†ÑÎûµÏùÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•"""
        try:
            strategy_id = str(uuid.uuid4())
            current_time = datetime.now().isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # ÏßÑÏûÖ/Ï≤≠ÏÇ∞ Ï°∞Í±¥Îì§ÏùÑ triggers ÌïÑÎìúÏóê Ï†ÄÏû•
                triggers_data = {
                    'entry_conditions': strategy_data.get('entry_conditions', []),
                    'exit_conditions': strategy_data.get('exit_conditions', []),
                    'entry_logic': strategy_data.get('entry_logic', 'AND'),
                    'exit_logic': strategy_data.get('exit_logic', 'OR')
                }
                
                # Ïï°ÏÖò Îç∞Ïù¥ÌÑ∞ (Îß§Ïàò/Îß§ÎèÑ Î°úÏßÅ)
                actions_data = {
                    'buy_action': {
                        'type': 'market_buy',
                        'conditions': strategy_data.get('entry_conditions', [])
                    },
                    'sell_action': {
                        'type': 'market_sell',
                        'conditions': strategy_data.get('exit_conditions', [])
                    },
                    'risk_management': strategy_data.get('risk_management', {})
                }
                
                # Î©îÏù∏ Ï†ÑÎûµ Î†àÏΩîÎìú ÏÇΩÏûÖ
                cursor.execute("""
                    INSERT INTO component_strategy 
                    (id, name, description, triggers, conditions, actions, 
                     category, difficulty, is_active, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    strategy_id,
                    strategy_data.get('name', 'Untitled Strategy'),
                    strategy_data.get('description', ''),
                    json.dumps(triggers_data, ensure_ascii=False),
                    json.dumps(strategy_data.get('conditions', {}), ensure_ascii=False),
                    json.dumps(actions_data, ensure_ascii=False),
                    'user_created',
                    'intermediate',
                    1,  # is_active
                    current_time,
                    current_time
                ))
                
                # ÏßÑÏûÖ Ï°∞Í±¥Îì§ÏùÑ Í∞úÎ≥Ñ Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ï†ÄÏû•
                for idx, condition in enumerate(strategy_data.get('entry_conditions', [])):
                    component_id = str(uuid.uuid4())
                    cursor.execute("""
                        INSERT INTO strategy_components 
                        (id, strategy_id, component_type, component_data, order_index, created_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (
                        component_id,
                        strategy_id,
                        'entry_condition',
                        json.dumps(condition, ensure_ascii=False),
                        idx,
                        current_time
                    ))
                
                # Ï≤≠ÏÇ∞ Ï°∞Í±¥Îì§ÏùÑ Í∞úÎ≥Ñ Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ï†ÄÏû•
                for idx, condition in enumerate(strategy_data.get('exit_conditions', [])):
                    component_id = str(uuid.uuid4())
                    cursor.execute("""
                        INSERT INTO strategy_components 
                        (id, strategy_id, component_type, component_data, order_index, created_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (
                        component_id,
                        strategy_id,
                        'exit_condition',
                        json.dumps(condition, ensure_ascii=False),
                        idx,
                        current_time
                    ))
                
                # Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨Î•º Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ï†ÄÏû•
                if strategy_data.get('risk_management'):
                    component_id = str(uuid.uuid4())
                    cursor.execute("""
                        INSERT INTO strategy_components 
                        (id, strategy_id, component_type, component_data, order_index, created_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (
                        component_id,
                        strategy_id,
                        'risk_management',
                        json.dumps(strategy_data['risk_management'], ensure_ascii=False),
                        999,  # Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨Îäî ÎßàÏßÄÎßâ ÏàúÏÑú
                        current_time
                    ))
                
                conn.commit()
                print(f"‚úÖ Ï†ÑÎûµ Ï†ÄÏû• ÏôÑÎ£å: {strategy_id}")
                return strategy_id
                
        except Exception as e:
            print(f"‚ùå Ï†ÑÎûµ Ï†ÄÏû• Ïã§Ìå®: {e}")
            raise e
    
    def get_strategy(self, strategy_id: str) -> Optional[Dict[str, Any]]:
        """Ï†ÑÎûµ IDÎ°ú Ï†ÑÎûµ Ï°∞Ìöå"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Î©îÏù∏ Ï†ÑÎûµ Ï†ïÎ≥¥ Ï°∞Ìöå
                cursor.execute("""
                    SELECT id, name, description, triggers, conditions, actions,
                           category, difficulty, is_active, created_at, updated_at
                    FROM component_strategy 
                    WHERE id = ?
                """, (strategy_id,))
                
                strategy_row = cursor.fetchone()
                if not strategy_row:
                    return None
                
                # Ïª¥Ìè¨ÎÑåÌä∏Îì§ Ï°∞Ìöå
                cursor.execute("""
                    SELECT component_type, component_data, order_index
                    FROM strategy_components 
                    WHERE strategy_id = ? 
                    ORDER BY order_index
                """, (strategy_id,))
                
                components = cursor.fetchall()
                
                # Ï†ÑÎûµ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
                strategy_data = {
                    'id': strategy_row[0],
                    'name': strategy_row[1],
                    'description': strategy_row[2],
                    'triggers': json.loads(strategy_row[3]) if strategy_row[3] else {},
                    'conditions': json.loads(strategy_row[4]) if strategy_row[4] else {},
                    'actions': json.loads(strategy_row[5]) if strategy_row[5] else {},
                    'category': strategy_row[6],
                    'difficulty': strategy_row[7],
                    'is_active': bool(strategy_row[8]),
                    'created_at': strategy_row[9],
                    'updated_at': strategy_row[10],
                    'components': {}
                }
                
                # Ïª¥Ìè¨ÎÑåÌä∏Îì§ Î∂ÑÎ•ò
                for comp_type, comp_data, order_idx in components:
                    if comp_type not in strategy_data['components']:
                        strategy_data['components'][comp_type] = []
                    
                    strategy_data['components'][comp_type].append({
                        'data': json.loads(comp_data),
                        'order': order_idx
                    })
                
                return strategy_data
                
        except Exception as e:
            print(f"‚ùå Ï†ÑÎûµ Ï°∞Ìöå Ïã§Ìå®: {e}")
            return None
    
    def get_all_strategies(self) -> List[Dict[str, Any]]:
        """Î™®Îì† Ï†ÑÎûµ Î™©Î°ù Ï°∞Ìöå"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT id, name, description, category, difficulty, 
                           is_active, created_at, updated_at
                    FROM component_strategy 
                    ORDER BY created_at DESC
                """)
                
                strategies = []
                for row in cursor.fetchall():
                    strategies.append({
                        'id': row[0],
                        'name': row[1],
                        'description': row[2],
                        'category': row[3],
                        'difficulty': row[4],
                        'is_active': bool(row[5]),
                        'created_at': row[6],
                        'updated_at': row[7]
                    })
                
                return strategies
                
        except Exception as e:
            print(f"‚ùå Ï†ÑÎûµ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®: {e}")
            return []
    
    def update_strategy(self, strategy_id: str, strategy_data: Dict[str, Any]) -> bool:
        """Ï†ÑÎûµ ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            current_time = datetime.now().isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Í∏∞Ï°¥ Ïª¥Ìè¨ÎÑåÌä∏Îì§ ÏÇ≠Ï†ú
                cursor.execute("DELETE FROM strategy_components WHERE strategy_id = ?", (strategy_id,))
                
                # Î©îÏù∏ Ï†ÑÎûµ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
                triggers_data = {
                    'entry_conditions': strategy_data.get('entry_conditions', []),
                    'exit_conditions': strategy_data.get('exit_conditions', []),
                    'entry_logic': strategy_data.get('entry_logic', 'AND'),
                    'exit_logic': strategy_data.get('exit_logic', 'OR')
                }
                
                actions_data = {
                    'buy_action': {
                        'type': 'market_buy',
                        'conditions': strategy_data.get('entry_conditions', [])
                    },
                    'sell_action': {
                        'type': 'market_sell',
                        'conditions': strategy_data.get('exit_conditions', [])
                    },
                    'risk_management': strategy_data.get('risk_management', {})
                }
                
                cursor.execute("""
                    UPDATE component_strategy 
                    SET name = ?, description = ?, triggers = ?, conditions = ?, 
                        actions = ?, updated_at = ?
                    WHERE id = ?
                """, (
                    strategy_data.get('name', 'Untitled Strategy'),
                    strategy_data.get('description', ''),
                    json.dumps(triggers_data, ensure_ascii=False),
                    json.dumps(strategy_data.get('conditions', {}), ensure_ascii=False),
                    json.dumps(actions_data, ensure_ascii=False),
                    current_time,
                    strategy_id
                ))
                
                # ÏÉà Ïª¥Ìè¨ÎÑåÌä∏Îì§ ÏÇΩÏûÖ (save_strategyÏôÄ ÎèôÏùºÌïú Î°úÏßÅ)
                # ... (ÏÉùÎûµ, save_strategyÏùò Ïª¥Ìè¨ÎÑåÌä∏ ÏÇΩÏûÖ Î°úÏßÅÍ≥º ÎèôÏùº)
                
                conn.commit()
                print(f"‚úÖ Ï†ÑÎûµ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: {strategy_id}")
                return True
                
        except Exception as e:
            print(f"‚ùå Ï†ÑÎûµ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")
            return False
    
    def delete_strategy(self, strategy_id: str) -> bool:
        """Ï†ÑÎûµ ÏÇ≠Ï†ú"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Í¥ÄÎ†® Ïª¥Ìè¨ÎÑåÌä∏Îì§ Î®ºÏ†Ä ÏÇ≠Ï†ú
                cursor.execute("DELETE FROM strategy_components WHERE strategy_id = ?", (strategy_id,))
                
                # Ïã§Ìñâ Í∏∞Î°ùÎì§ ÏÇ≠Ï†ú
                cursor.execute("DELETE FROM strategy_execution WHERE strategy_id = ?", (strategy_id,))
                
                # Î©îÏù∏ Ï†ÑÎûµ ÏÇ≠Ï†ú
                cursor.execute("DELETE FROM component_strategy WHERE id = ?", (strategy_id,))
                
                conn.commit()
                print(f"‚úÖ Ï†ÑÎûµ ÏÇ≠Ï†ú ÏôÑÎ£å: {strategy_id}")
                return True
                
        except Exception as e:
            print(f"‚ùå Ï†ÑÎûµ ÏÇ≠Ï†ú Ïã§Ìå®: {e}")
            return False
    
    def activate_strategy(self, strategy_id: str) -> bool:
        """Ï†ÑÎûµ ÌôúÏÑ±Ìôî"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    UPDATE component_strategy 
                    SET is_active = 1, updated_at = ?
                    WHERE id = ?
                """, (datetime.now().isoformat(), strategy_id))
                
                conn.commit()
                print(f"‚úÖ Ï†ÑÎûµ ÌôúÏÑ±Ìôî: {strategy_id}")
                return True
                
        except Exception as e:
            print(f"‚ùå Ï†ÑÎûµ ÌôúÏÑ±Ìôî Ïã§Ìå®: {e}")
            return False
    
    def deactivate_strategy(self, strategy_id: str) -> bool:
        """Ï†ÑÎûµ ÎπÑÌôúÏÑ±Ìôî"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    UPDATE component_strategy 
                    SET is_active = 0, updated_at = ?
                    WHERE id = ?
                """, (datetime.now().isoformat(), strategy_id))
                
                conn.commit()
                print(f"‚úÖ Ï†ÑÎûµ ÎπÑÌôúÏÑ±Ìôî: {strategy_id}")
                return True
                
        except Exception as e:
            print(f"‚ùå Ï†ÑÎûµ ÎπÑÌôúÏÑ±Ìôî Ïã§Ìå®: {e}")
            return False
    
    def get_active_strategies(self) -> List[Dict[str, Any]]:
        """ÌôúÏÑ±ÌôîÎêú Ï†ÑÎûµÎì§Îßå Ï°∞Ìöå"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT id, name, description, triggers, actions
                    FROM component_strategy 
                    WHERE is_active = 1
                    ORDER BY created_at DESC
                """)
                
                strategies = []
                for row in cursor.fetchall():
                    strategies.append({
                        'id': row[0],
                        'name': row[1],
                        'description': row[2],
                        'triggers': json.loads(row[3]) if row[3] else {},
                        'actions': json.loads(row[4]) if row[4] else {}
                    })
                
                return strategies
                
        except Exception as e:
            print(f"‚ùå ÌôúÏÑ± Ï†ÑÎûµ Ï°∞Ìöå Ïã§Ìå®: {e}")
            return []
    
    def log_strategy_execution(self, strategy_id: str, symbol: str, 
                             trigger_type: str, action_type: str, 
                             market_data: Dict, result: str, 
                             result_details: Optional[str] = None, position_tag: Optional[str] = None) -> str:
        """Ï†ÑÎûµ Ïã§Ìñâ Í∏∞Î°ù Ï†ÄÏû•"""
        try:
            execution_id = str(uuid.uuid4())
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    INSERT INTO strategy_execution 
                    (id, strategy_id, symbol, trigger_type, action_type, 
                     market_data, result, result_details, position_tag, executed_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    execution_id,
                    strategy_id,
                    symbol,
                    trigger_type,
                    action_type,
                    json.dumps(market_data, ensure_ascii=False),
                    result,
                    result_details,
                    position_tag,
                    datetime.now().isoformat()
                ))
                
                conn.commit()
                return execution_id
                
        except Exception as e:
            print(f"‚ùå Ïã§Ìñâ Í∏∞Î°ù Ï†ÄÏû• Ïã§Ìå®: {e}")
            return ""
    
    def get_strategy_execution_history(self, strategy_id: str, limit: int = 100) -> List[Dict[str, Any]]:
        """Ï†ÑÎûµ Ïã§Ìñâ Í∏∞Î°ù Ï°∞Ìöå"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT id, symbol, trigger_type, action_type, market_data, 
                           result, result_details, position_tag, executed_at
                    FROM strategy_execution 
                    WHERE strategy_id = ?
                    ORDER BY executed_at DESC
                    LIMIT ?
                """, (strategy_id, limit))
                
                executions = []
                for row in cursor.fetchall():
                    executions.append({
                        'id': row[0],
                        'symbol': row[1],
                        'trigger_type': row[2],
                        'action_type': row[3],
                        'market_data': json.loads(row[4]) if row[4] else {},
                        'result': row[5],
                        'result_details': row[6],
                        'position_tag': row[7],
                        'executed_at': row[8]
                    })
                
                return executions
                
        except Exception as e:
            print(f"‚ùå Ïã§Ìñâ Í∏∞Î°ù Ï°∞Ìöå Ïã§Ìå®: {e}")
            return []
