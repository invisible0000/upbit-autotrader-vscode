"""
새로운 컴포넌트 기반 전략 관리 화면
우리의 8개 컴포넌트 시스템을 기준으로 완전히 새로 구현
"""

from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QTabWidget, QHBoxLayout,
    QPushButton, QLabel, QMessageBox
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QIcon

# 우리의 새로운 컴포넌트 시스템 import
import sys
import os

# 프로젝트 루트 경로 추가 (올바른 경로 설정)
# 현재 파일의 위치에서 프로젝트 루트까지 거슬러 올라가기
current_dir = os.path.dirname(__file__)  # strategy_management 폴더
screens_dir = os.path.dirname(current_dir)  # screens 폴더
desktop_dir = os.path.dirname(screens_dir)  # desktop 폴더
ui_dir = os.path.dirname(desktop_dir)  # ui 폴더
upbit_auto_trading_dir = os.path.dirname(ui_dir)  # upbit_auto_trading 폴더
project_root = os.path.dirname(upbit_auto_trading_dir)  # upbit-autotrader-vscode 폴더

sys.path.insert(0, project_root)

try:
    # 개별적으로 시도해서 어떤 것이 로드 가능한지 확인
    ConditionDialog = None
    try:
        from .components.condition_dialog import ConditionDialog
        print("✅ ConditionDialog 로드 성공")
    except ImportError as e:
        print(f"⚠️ ConditionDialog 로드 실패: {e}")
    
    IntegratedConditionManager = None
    try:
        from .integrated_condition_manager import IntegratedConditionManager
        print("✅ IntegratedConditionManager 로드 성공")
    except ImportError as e:
        print(f"⚠️ IntegratedConditionManager 로드 실패: {e}")
        
    print(f"🔍 프로젝트 루트: {project_root}")
    
except Exception as e:
    print(f"❌ 전체 import 실패: {e}")
    ConditionDialog = None
    IntegratedConditionManager = None

class NewStrategyManagementScreen(QWidget):
    """완전히 새로운 컴포넌트 기반 전략 관리 화면"""
    
    # 시그널 정의
    strategy_saved = pyqtSignal(dict)
    backtest_requested = pyqtSignal(str)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("매매 전략 관리")
        # 1600x1000 화면에 맞춰서 크기 조정
        self.setMinimumSize(800, 600)
        
        self.init_ui()
    
    def init_ui(self):
        """UI 초기화 - 우리 컴포넌트 기반"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)  # 마진 줄이기
        layout.setSpacing(5)  # 간격 줄이기
        
        # 탭 위젯 생성 (상단 툴바 제거)
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #c0c0c0;
                border-radius: 5px;
                background-color: white;
            }
            QTabBar::tab {
                background-color: #f0f0f0;
                border: 1px solid #c0c0c0;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }
            QTabBar::tab:selected {
                background-color: white;
                border-bottom-color: white;
            }
            QTabBar::tab:hover {
                background-color: #e6f3ff;
            }
        """)
        
        # 탭들 생성 - 우리 컴포넌트 기반
        self.condition_builder_tab = self.create_condition_builder_tab()
        self.strategy_combination_tab = self.create_strategy_combination_tab()
        self.backtest_tab = self.create_backtest_tab()
        self.analytics_tab = self.create_analytics_tab()
        
        # 탭 추가
        self.tab_widget.addTab(self.condition_builder_tab, "🎯 조건 빌더")
        self.tab_widget.addTab(self.strategy_combination_tab, "🔗 전략 조합")
        self.tab_widget.addTab(self.backtest_tab, "📊 백테스팅")
        self.tab_widget.addTab(self.analytics_tab, "📈 전략 분석")
        
        layout.addWidget(self.tab_widget)
        
        print("✅ 새로운 컴포넌트 기반 전략 관리 화면 초기화 완료")
    
    def create_condition_builder_tab(self):
        """조건 빌더 탭 생성 - 우리의 핵심 컴포넌트"""
        try:
            # 먼저 IntegratedConditionManager 시도
            if IntegratedConditionManager is not None:
                print("🚀 IntegratedConditionManager 로딩 중...")
                integrated_manager = IntegratedConditionManager()
                
                # 시그널 연결 (있는 경우)
                if hasattr(integrated_manager, 'condition_saved'):
                    integrated_manager.condition_saved.connect(self.on_condition_saved)
                
                print("✅ IntegratedConditionManager 로드 성공!")
                return integrated_manager
            
            # 폴백: 기존 ConditionDialog 시도
            elif ConditionDialog is not None:
                print("📋 ConditionDialog 폴백 로딩 중...")
                condition_dialog = ConditionDialog()
                
                # 조건 저장 시그널 연결
                if hasattr(condition_dialog, 'condition_saved'):
                    condition_dialog.condition_saved.connect(self.on_condition_saved)
                
                return condition_dialog
            
            else:
                raise ImportError("조건 빌더 컴포넌트를 로드할 수 없습니다")
            
        except Exception as e:
            print(f"❌ 조건 빌더 로딩 실패: {e}")
            
            # 대체 위젯 생성
            fallback_widget = QWidget()
            layout = QVBoxLayout(fallback_widget)
            
            # 에러 정보 표시
            error_label = QLabel(f"조건 빌더 로딩 실패: {e}")
            error_label.setStyleSheet("color: red; font-size: 14px; padding: 20px;")
            error_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            # 상세 정보
            detail_label = QLabel("IntegratedConditionManager와 ConditionDialog 모두 사용할 수 없습니다.")
            detail_label.setStyleSheet("color: #666; font-size: 12px; padding: 10px;")
            detail_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            retry_btn = QPushButton("🔄 다시 시도")
            retry_btn.clicked.connect(lambda: print("조건 빌더 재시도 요청"))
            
            layout.addWidget(error_label)
            layout.addWidget(detail_label)
            layout.addWidget(retry_btn)
            
            return fallback_widget
    
    def create_strategy_combination_tab(self):
        """전략 조합 탭 생성 - 조건들을 조합하여 전략 생성"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # 헤더
        header_label = QLabel("🔗 전략 조합 관리")
        header_label.setStyleSheet("""
            font-size: 16px; 
            font-weight: bold; 
            color: #2c3e50;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            border-left: 4px solid #007bff;
        """)
        layout.addWidget(header_label)
        
        # 설명
        desc_label = QLabel("저장된 조건들을 조합하여 완전한 매매 전략을 구성합니다.")
        desc_label.setStyleSheet("color: #6c757d; font-size: 12px; padding: 10px;")
        layout.addWidget(desc_label)
        
        # TODO: 여기에 조건 조합 UI 구현 예정
        placeholder_label = QLabel("🚧 조건 조합 UI 구현 예정")
        placeholder_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        placeholder_label.setStyleSheet("""
            color: #ffc107; 
            font-size: 14px; 
            font-style: italic;
            padding: 50px;
            border: 2px dashed #ffc107;
            border-radius: 10px;
            margin: 20px;
        """)
        layout.addWidget(placeholder_label)
        
        return widget
    
    def create_backtest_tab(self):
        """백테스팅 탭 생성"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # 헤더
        header_label = QLabel("📊 백테스팅 엔진")
        header_label.setStyleSheet("""
            font-size: 16px; 
            font-weight: bold; 
            color: #2c3e50;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            border-left: 4px solid #28a745;
        """)
        layout.addWidget(header_label)
        
        # 설명
        desc_label = QLabel("생성된 전략의 과거 성과를 시뮬레이션합니다.")
        desc_label.setStyleSheet("color: #6c757d; font-size: 12px; padding: 10px;")
        layout.addWidget(desc_label)
        
        # TODO: 백테스팅 UI 구현
        placeholder_label = QLabel("🚧 백테스팅 UI 구현 예정")
        placeholder_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        placeholder_label.setStyleSheet("""
            color: #28a745; 
            font-size: 14px; 
            font-style: italic;
            padding: 50px;
            border: 2px dashed #28a745;
            border-radius: 10px;
            margin: 20px;
        """)
        layout.addWidget(placeholder_label)
        
        return widget
    
    def create_analytics_tab(self):
        """전략 분석 탭 생성"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # 헤더
        header_label = QLabel("📈 전략 분석 대시보드")
        header_label.setStyleSheet("""
            font-size: 16px; 
            font-weight: bold; 
            color: #2c3e50;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            border-left: 4px solid #dc3545;
        """)
        layout.addWidget(header_label)
        
        # 설명
        desc_label = QLabel("전략 성과 분석 및 최적화 도구를 제공합니다.")
        desc_label.setStyleSheet("color: #6c757d; font-size: 12px; padding: 10px;")
        layout.addWidget(desc_label)
        
        # TODO: 분석 UI 구현
        placeholder_label = QLabel("🚧 전략 분석 UI 구현 예정")
        placeholder_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        placeholder_label.setStyleSheet("""
            color: #dc3545; 
            font-size: 14px; 
            font-style: italic;
            padding: 50px;
            border: 2px dashed #dc3545;
            border-radius: 10px;
            margin: 20px;
        """)
        layout.addWidget(placeholder_label)
        
        return widget
    
    def on_condition_saved(self, condition_data):
        """조건 저장 완료 시 호출"""
        print(f"✅ 조건 저장 완료: {condition_data.get('name', 'Unknown')}")
        self.strategy_saved.emit(condition_data)
        
        # 성공 메시지 표시
        QMessageBox.information(
            self, 
            "저장 완료", 
            f"조건 '{condition_data.get('name', 'Unknown')}'이(가) 성공적으로 저장되었습니다!"
        )

if __name__ == "__main__":
    from PyQt6.QtWidgets import QApplication
    import sys
    
    app = QApplication(sys.argv)
    
    window = NewStrategyManagementScreen()
    window.show()
    
    sys.exit(app.exec())
