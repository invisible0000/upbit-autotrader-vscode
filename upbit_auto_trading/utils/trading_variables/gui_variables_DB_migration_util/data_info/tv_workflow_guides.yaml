# LLM 에이전트 워크플로우 가이드
# ================================
# LLM 에이전트와 사용자가 효율적으로 협업하기 위한 워크플로우

workflow_overview:
  title: "지표 정보 관리 워크플로우"
  description: "사용자 요청 → data_info 편집 → DB 마이그레이션 → 코드 동기화"
  
  phases:
    1: "요구사항 분석 및 data_info 파일 편집"
    2: "GUI 마이그레이션 도구로 DB 반영"
    3: "DB → Code 동기화로 variable_definitions.py 생성"
    4: "검증 및 배포"

# === Phase 1: 요구사항 분석 및 data_info 편집 ===
phase1_llm_agent_tasks:
  analyze_request:
    description: "사용자 요청을 분석하여 필요한 작업 파악"
    steps:
      - "새 지표 추가인지, 기존 지표 수정인지 판단"
      - "어떤 카테고리에 속하는지 분류"
      - "필요한 파라미터 타입 확인"
      - "관련된 data_info 파일들 식별"
    
  read_reference_files:
    description: "관련 data_info 파일들을 읽어 현재 상태 파악"
    files_to_check:
      - indicator_categories.yaml
      - parameter_types.yaml
      - indicator_library.yaml
      - help_texts.yaml
      - placeholder_texts.yaml
    
  edit_data_info:
    description: "요구사항에 맞게 data_info 파일들을 편집"
    best_practices:
      - "기존 패턴과 일관성 유지"
      - "표준화된 명명 규칙 준수"
      - "충분한 설명과 예시 포함"
      - "카테고리 간 관계 고려"

# === Phase 2: GUI 마이그레이션 도구 사용 ===
phase2_user_tasks:
  launch_gui:
    command: "python run_gui_trading_variables_DB_migration.py"
    location: "upbit_auto_trading/utils/trading_variables/gui_variables_DB_migration_util/"
    
  migration_steps:
    1: "DB 선택 탭에서 settings.sqlite3 로드"
    2: "마이그레이션 미리보기에서 변경사항 확인"
    3: "마이그레이션 실행으로 DB에 반영"
    4: "백업 관리에서 안전성 확인"

# === Phase 3: DB → Code 동기화 ===
phase3_sync_process:
  access_sync_tab:
    description: "GUI의 8번째 탭 '🔄 DB → Code 동기화' 사용"
    
  sync_steps:
    1: "DB 파일 경로 확인 (자동 연동)"
    2: "출력 폴더 설정 (기본: utils/trading_variables/)"
    3: "🔄 동기화 실행 버튼 클릭"
    4: "진행 상황 모니터링"
    5: "생성된 variable_definitions_new_YYYYMMDD_HHMMSS.py 확인"
    
  output_verification:
    check_items:
      - "총 지표 수 확인"
      - "카테고리별 분포 확인"
      - "파라미터 정의 완전성 확인"
      - "도움말 텍스트 품질 확인"

# === Phase 4: 검증 및 배포 ===
phase4_validation:
  file_comparison:
    description: "기존 파일과 새 파일 비교"
    tools:
      - "GUI의 비교 기능 활용"
      - "텍스트 에디터 diff 기능"
      - "코드 검토 도구"
    
  testing:
    unit_tests: "개별 메서드 동작 확인"
    integration_tests: "전체 시스템과의 호환성 확인"
    user_acceptance: "실제 사용 시나리오 테스트"
    
  deployment:
    backup_existing: "기존 variable_definitions.py 백업"
    replace_file: "새 파일로 교체"
    update_references: "관련 코드의 참조 업데이트"
    verify_functionality: "전체 시스템 동작 확인"

# === 각 단계별 LLM 에이전트 역할 ===
llm_agent_responsibilities:
  requirements_analysis:
    - "사용자 요청의 기술적 요구사항 추출"
    - "기존 시스템과의 호환성 고려"
    - "필요한 데이터 구조 설계"
    
  data_structure_design:
    - "적절한 카테고리 분류"
    - "파라미터 타입 및 범위 결정"
    - "도움말 및 플레이스홀더 작성"
    
  file_editing:
    - "YAML 파일 구조 준수"
    - "기존 패턴과 일관성 유지"
    - "완전하고 정확한 정보 제공"
    
  quality_assurance:
    - "편집된 내용의 논리적 일관성 확인"
    - "누락된 정보 식별 및 보완"
    - "사용자 친화적인 설명 제공"

# === 사용자 역할 ===
user_responsibilities:
  requirement_specification:
    - "명확한 요구사항 전달"
    - "사용 목적 및 맥락 설명"
    - "우선순위 및 제약사항 명시"
    
  gui_operation:
    - "마이그레이션 GUI 도구 실행"
    - "미리보기를 통한 변경사항 검토"
    - "마이그레이션 실행 및 결과 확인"
    
  validation_and_feedback:
    - "생성된 결과물 검토"
    - "실제 사용 환경에서 테스트"
    - "문제점 발견 시 피드백 제공"

# === 협업 효율성 증대 방안 ===
efficiency_improvements:
  reduced_token_consumption:
    - "구조화된 데이터로 정보 밀도 증가"
    - "반복적인 설명 최소화"
    - "표준화된 패턴으로 예측 가능성 향상"
    
  clearer_communication:
    - "명확한 역할 분담"
    - "단계별 체크포인트"
    - "표준화된 용어 사용"
    
  faster_iteration:
    - "자동화된 동기화 프로세스"
    - "실시간 미리보기 기능"
    - "즉시 적용 가능한 결과물"

# === 일반적인 사용 시나리오 ===
common_scenarios:
  new_indicator_addition:
    description: "새로운 기술적 지표 추가"
    files_to_edit:
      - indicator_categories.yaml (카테고리 추가)
      - indicator_library.yaml (지표 정의 추가)
      - parameter_types.yaml (필요시 새 타입 추가)
      - help_texts.yaml (도움말 추가)
      - placeholder_texts.yaml (플레이스홀더 추가)
    
  parameter_modification:
    description: "기존 지표의 파라미터 수정"
    files_to_edit:
      - parameter_types.yaml (타입 정의 수정)
      - help_texts.yaml (도움말 업데이트)
      - placeholder_texts.yaml (예시 업데이트)
    
  category_reorganization:
    description: "지표 카테고리 체계 개편"
    files_to_edit:
      - indicator_categories.yaml (카테고리 구조 변경)
      - indicator_library.yaml (지표 분류 변경)
    
  localization:
    description: "다국어 지원 추가"
    files_to_edit:
      - help_texts.yaml (다국어 텍스트 추가)
      - placeholder_texts.yaml (다국어 예시 추가)

# === 품질 관리 가이드라인 ===
quality_guidelines:
  consistency:
    - "명명 규칙 일관성"
    - "설명 스타일 통일"
    - "데이터 구조 표준화"
    
  completeness:
    - "필수 정보 누락 방지"
    - "충분한 설명 제공"
    - "다양한 사용 사례 고려"
    
  accuracy:
    - "기술적 정확성 확보"
    - "실제 사용 가능한 값 범위"
    - "올바른 카테고리 분류"
    
  usability:
    - "사용자 친화적 설명"
    - "실용적인 예시 제공"
    - "직관적인 구조"

# === 트러블슈팅 가이드 ===
troubleshooting:
  yaml_syntax_errors:
    symptoms: "YAML 파싱 오류"
    solutions:
      - "들여쓰기 확인 (공백 사용)"
      - "특수문자 이스케이프 처리"
      - "리스트/딕셔너리 구조 검증"
    
  migration_failures:
    symptoms: "DB 마이그레이션 실패"
    solutions:
      - "스키마 호환성 확인"
      - "데이터 타입 일치성 검증"
      - "외래키 제약조건 확인"
    
  sync_issues:
    symptoms: "코드 동기화 문제"
    solutions:
      - "DB 연결 상태 확인"
      - "파일 권한 확인"
      - "출력 경로 접근성 확인"

# === 성공 지표 ===
success_metrics:
  efficiency:
    - "요청부터 완성까지 소요 시간"
    - "LLM 토큰 사용량"
    - "재작업 횟수"
    
  quality:
    - "생성된 코드의 오류율"
    - "사용자 만족도"
    - "시스템 안정성"
    
  collaboration:
    - "의사소통 명확성"
    - "역할 분담 효과성"
    - "학습 곡선 개선"
